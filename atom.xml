<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zehai&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zehai.info/"/>
  <updated>2021-05-28T06:48:48.169Z</updated>
  <id>http://zehai.info/</id>
  
  <author>
    <name>Zhang Zehai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>prototype</title>
    <link href="http://zehai.info/2021/03/07/2021-03-07-prototype/"/>
    <id>http://zehai.info/2021/03/07/2021-03-07-prototype/</id>
    <published>2021-03-07T06:55:02.000Z</published>
    <updated>2021-05-28T06:48:48.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h1><p>含义：proto（/ˈproʊtə/）原始, 原型, 原始的</p><p>目的：补充JavaScript对于对象的支持，通过protype来实现class中的method</p><p>过程：熟悉实例对象<--->构造函数<--->原型 三者之间的关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数 创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog();<span class="comment">//Person 为构造函数,person为实例对象</span></span><br><span class="line">dog.name = <span class="string">&#x27;柯基&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(dog.name) <span class="comment">// 柯基</span></span><br></pre></td></tr></table></figure><ul><li>构造函数通过prototype访问原型（一个类的属性，对象都可以访问）</li><li>实例对象通过 <code>_proto_</code> 访问原型 === 构造函数通过<code>prototype</code>访问原型（原型也有<code>_proto_</code>）</li><li>实例原型通过<code>constructor</code>访问构造函数(Dog=== Dog.prototype.constructor)</li></ul><p><img src="../img/image-20210224154735705.png" alt="image-20210224154735705"></p><ul><li>原型遵循向上原则，即找不到就不断向上（prototype）查询</li><li>原型因为不停延长形成链，称作原型链，但是  <code>Object.prototype.__proto__</code> 的值为 null 跟 Object.prototype 没有原型</li><li>原型链大概实现了类（Class）以及继承（Extend）的问题，但它并不是复制，是建立一种关联，通过<code>prototype</code>/<code>_proto_</code> 来访问其他对象的属性和方法，属于委托/借用</li></ul><h1 id="Extend"><a href="#Extend" class="headerlink" title="Extend"></a>Extend</h1><p>一共分为6种</p><ul><li>原型链继承</li><li>借用构造函数（经典继承）</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承</li></ul><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.names = [<span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;daisy&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line">child1.names.push(<span class="string">&#x27;yayu&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span></span><br></pre></td></tr></table></figure><p>问题：</p><ul><li>属性被所有child共享</li><li>创建child实例时，不能向parent传参</li></ul><h2 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">&#x27;kevin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">&#x27;daisy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// daisy</span></span><br></pre></td></tr></table></figure><p>有点：</p><ul><li>避免引用类型的属性被所有实例共享</li><li>可以在Child中间parent传参</li></ul><p>缺点：</p><ul><li>方法在构造函数中定义，每次创建势力都会创建一遍方法</li></ul><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>以上两种方法的组合,为最常用的继承方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"></span><br><span class="line">child1.colors.push(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.colors); <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">&#x27;daisy&#x27;</span>, <span class="string">&#x27;20&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// daisy</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.age); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.colors); <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prototype&quot;&gt;&lt;a href=&quot;#Prototype&quot; class=&quot;headerlink&quot; title=&quot;Prototype&quot;&gt;&lt;/a&gt;Prototype&lt;/h1&gt;&lt;p&gt;含义：proto（/ˈproʊtə/）原始, 原型, 原始的&lt;/p&gt;
&lt;p&gt;目的：补
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://zehai.info/categories/JavaScript/"/>
    
    
      <category term="prototype" scheme="http://zehai.info/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>dockerMysql</title>
    <link href="http://zehai.info/2021/02/10/2021-02-10-dockerMysql/"/>
    <id>http://zehai.info/2021/02/10/2021-02-10-dockerMysql/</id>
    <published>2021-02-10T06:54:33.000Z</published>
    <updated>2021-05-28T06:48:48.168Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>link:<a href="https://hub.docker.com/_/mysql?tab=description&amp;page=1&amp;ordering=last_updated">mysql-docker</a></p></blockquote><h1 id="支持标签"><a href="#支持标签" class="headerlink" title="支持标签"></a>支持标签</h1><ul><li><a href="https://github.com/docker-library/mysql/blob/2966bfbd71cf370770cd880aa45f3c8f155d0aae/8.0/Dockerfile.debian"><code>8.0.23</code>, <code>8.0</code>, <code>8</code>, <code>latest</code></a></li><li><a href="https://github.com/docker-library/mysql/blob/2966bfbd71cf370770cd880aa45f3c8f155d0aae/5.7/Dockerfile.debian"><code>5.7.33</code>, <code>5.7</code>, <code>5</code></a></li><li><a href="https://github.com/docker-library/mysql/blob/2966bfbd71cf370770cd880aa45f3c8f155d0aae/5.6/Dockerfile.debian"><code>5.6.51</code>, <code>5.6</code></a></li></ul><h1 id="快速手册"><a href="#快速手册" class="headerlink" title="快速手册"></a>快速手册</h1><ul><li><strong>issues</strong>: <a href="https://github.com/docker-library/mysql/issues">https://github.com/docker-library/mysql/issues</a></li><li><strong>支持平台</strong>: (<a href="https://github.com/docker-library/official-images#architectures-other-than-amd64">more info</a>) <a href="https://hub.docker.com/r/amd64/mysql/"><code>amd64</code></a></li><li><strong>发布image 详情</strong>: <a href="https://github.com/docker-library/repo-info/blob/master/repos/mysql">repo-info repo’s <code>repos/mysql/</code> directory</a> (<a href="https://github.com/docker-library/repo-info/commits/master/repos/mysql">history</a>) (image metadata, transfer size, etc)</li><li><strong>Image 更新</strong>: <a href="https://github.com/docker-library/official-images/issues?q=label%3Alibrary%2Fmysql">official-images repo’s <code>library/mysql</code> label</a><br><a href="https://github.com/docker-library/official-images/blob/master/library/mysql">official-images repo’s <code>library/mysql</code> file</a> (<a href="https://github.com/docker-library/official-images/commits/master/library/mysql">history</a>)</li><li><strong>描述来源</strong>: <a href="https://github.com/docker-library/docs/tree/master/mysql">docs repo’s <code>mysql/</code> directory</a> (<a href="https://github.com/docker-library/docs/commits/master/mysql">history</a>)</li></ul><h1 id="什么是-MySQL"><a href="#什么是-MySQL" class="headerlink" title="什么是 MySQL?"></a>什么是 MySQL?</h1><p>MySQL 是最受欢迎的，开源的数据库. 凭借被验证过的性能表现，可靠性，易用性, MySQL已经成为基于web的应用程序的 主要选择,包括完整得个人项目和网站项目（电子上午，信息服务）,也包括优秀的Facebook Facebook, Twitter, YouTube, Yahoo! </p><h1 id="如何使用mysql-image"><a href="#如何使用mysql-image" class="headerlink" title="如何使用mysql image"></a>如何使用mysql image</h1><h2 id="创建-mysql-服务实例"><a href="#创建-mysql-服务实例" class="headerlink" title="创建 mysql 服务实例"></a>创建 <code>mysql</code> 服务实例</h2><p>启动 MySQL 比较简单:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure><ul><li>some-mysql 容器名称</li><li>my-secret-pw 是root账户的密码</li><li>tag 是mysql的版本</li></ul><h2 id="通过mysql命令行连接mysql"><a href="#通过mysql命令行连接mysql" class="headerlink" title="通过mysql命令行连接mysql"></a>通过mysql命令行连接mysql</h2><p>以下命令可以启动mysql容器并运行终端，执行SQL语句</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --network some-network --rm mysql mysql -hsome-mysql -uexample-user -p</span><br></pre></td></tr></table></figure><ul><li>some-mysql 容器名称</li><li>some-network 连接网络（方便容器间访问）</li></ul><p>也可以直接运行客户端，访问远程数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p</span><br></pre></td></tr></table></figure><p>更多命令请访问 <a href="http://dev.mysql.com/doc/en/mysql.html">MySQL documentation</a></p><h2 id="使用docker-stack-或docker-compose部署"><a href="#使用docker-stack-或docker-compose部署" class="headerlink" title="使用docker stack 或docker-compose部署"></a>使用docker stack 或docker-compose部署</h2><p>示例<code>stack.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use root/example as user/password credentials</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">example</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><ul><li><code>docker stack deploy -c stack.yml mysql</code> </li><li><code>docker-compose -f stack.yml up</code></li></ul><p>启动后, 访问 <code>http://swarm-ip:8080</code>, <code>http://localhost:8080</code>, or <code>http://host-ip:8080</code> </p><h2 id="shell访问查看-MySQL-日志"><a href="#shell访问查看-MySQL-日志" class="headerlink" title="shell访问查看 MySQL 日志"></a>shell访问查看 MySQL 日志</h2><p>使用 <code>docker exec</code> 可以让你在容器内执行命令，命令如下 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it some-mysql bash</span><br></pre></td></tr></table></figure><p>容器日志:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs some-mysql</span><br></pre></td></tr></table></figure><h2 id="自定义-MySQL-配置文件"><a href="#自定义-MySQL-配置文件" class="headerlink" title="自定义 MySQL 配置文件"></a>自定义 MySQL 配置文件</h2><p>mysql默认配置文件在 <code>/etc/mysql/my.cnf</code>, 也可能指定了额外文件如： <code>/etc/mysql/conf.d</code> or <code>/etc/mysql/mysql.conf.d</code>. 请检查mysqlimage本身的相关文件和目录以了解更多信息</p><p>如果 <code>/my/custom/config-file.cnf</code> 是你自定义的文件未知和名字, 你可以这样启动你的<code>mysql</code> 容器 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure><p>你会启动一个用你自定义配置 <code>/etc/mysql/my.cnf</code> and <code>/etc/mysql/conf.d/config-file.cnf</code>, 的mysql容器</p><h3 id="不使用cnf-文件配置"><a href="#不使用cnf-文件配置" class="headerlink" title="不使用cnf 文件配置"></a>不使用<code>cnf</code> 文件配置</h3><p>很多配置都可以传给 <code>mysqld</code>. 使你自定义容器而不需要 <code>cnf</code> 文件. 如当你想改变默认编码和排序规则，使用 UTF-8 (<code>utf8mb4</code>) 只需要执行如下命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>如果你想看到所有的配置项，只需要执行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm mysql:tag --verbose --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>docker run 时，可以一个或多个参数进行配置. 不过需要注意，如果使用已经包含数据库的数据目录启动容器，以下变量不会产生影响，在启动时，任何预先存在的数据库都保持不变，任何之前存在的数据库在容器启动时将保持不变.</p><h3 id="MYSQL-ROOT-PASSWORD"><a href="#MYSQL-ROOT-PASSWORD" class="headerlink" title="MYSQL_ROOT_PASSWORD"></a><code>MYSQL_ROOT_PASSWORD</code></h3><p>该变量是必须的，是root账户的密码.</p><h3 id="MYSQL-DATABASE"><a href="#MYSQL-DATABASE" class="headerlink" title="MYSQL_DATABASE"></a><code>MYSQL_DATABASE</code></h3><p>该变量可选，允许在启动时，指定数据库的名称. 如果提供了用户名/密码，用户会被赋予超级权限.</p><h3 id="MYSQL-USER-MYSQL-PASSWORD"><a href="#MYSQL-USER-MYSQL-PASSWORD" class="headerlink" title="MYSQL_USER, MYSQL_PASSWORD"></a><code>MYSQL_USER</code>, <code>MYSQL_PASSWORD</code></h3><p>可选变量，用于创建新用户和密码，用户将获得超级管理员权限，两个参数都是必须的.</p><p>注意：不需要使用该机制来创建root超级用户，默认使用 <code>MYSQL_ROOT_PASSWORD</code> 来创建密码</p><h3 id="MYSQL-ALLOW-EMPTY-PASSWORD"><a href="#MYSQL-ALLOW-EMPTY-PASSWORD" class="headerlink" title="MYSQL_ALLOW_EMPTY_PASSWORD"></a><code>MYSQL_ALLOW_EMPTY_PASSWORD</code></h3><p>可选变量，设置非空值（如yes），允许root用户无密码启动容器. <em>注意</em>: 除非你知道你在做什么，否则不建议设置为 <code>yes</code> ,因为这将使mysql实例完全不受保护,允许所有人获得完全的超级用户权限.</p><h3 id="MYSQL-RANDOM-ROOT-PASSWORD"><a href="#MYSQL-RANDOM-ROOT-PASSWORD" class="headerlink" title="MYSQL_RANDOM_ROOT_PASSWORD"></a><code>MYSQL_RANDOM_ROOT_PASSWORD</code></h3><p>可选变量，设置非空值（如yes）,使用pwgen , 为root用户随机生成密码 .密码将被打印.</p><h3 id="MYSQL-ONETIME-PASSWORD"><a href="#MYSQL-ONETIME-PASSWORD" class="headerlink" title="MYSQL_ONETIME_PASSWORD"></a><code>MYSQL_ONETIME_PASSWORD</code></h3><p>设置用户 初始化完成后过期，在首次登录时候强制修改密码. 任何非空值将激活这个配置，注意：仅支持5.6+版本，以下版本会报错</p><h3 id="MYSQL-INITDB-SKIP-TZINFO"><a href="#MYSQL-INITDB-SKIP-TZINFO" class="headerlink" title="MYSQL_INITDB_SKIP_TZINFO"></a><code>MYSQL_INITDB_SKIP_TZINFO</code></h3><p>默认，entrypoint脚本自动加载<code>CONVERT_TZ()</code>函数需要的时区数据，如果不需要，任何非空值都将禁用时区加载</p><h2 id="Docker-Secrets"><a href="#Docker-Secrets" class="headerlink" title="Docker Secrets"></a>Docker Secrets</h2><p>通过环境变量传递敏感信息，还有另一种方法, <code>_FILE</code>  可以附加到前面列的环境变量，使得可以从文件中的变量初始化脚本，特别是，这可以用于存在<code>/run/secrets/&lt;secret_name&gt;</code>中的docker screts从加载密码, 如 ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql-root -d mysql:tag</span><br></pre></td></tr></table></figure><p>目前仅支持： <code>MYSQL_ROOT_PASSWORD</code>, <code>MYSQL_ROOT_HOST</code>, <code>MYSQL_DATABASE</code>, <code>MYSQL_USER</code>, 和<code>MYSQL_PASSWORD</code>.</p><h1 id="初始化新实例"><a href="#初始化新实例" class="headerlink" title="初始化新实例"></a>初始化新实例</h1><p>刚启动容器,指定名字的新数据库会被创建，并且根据提供的变量初始化. 此外,它将执行扩展名为<code>.sh</code>, <code>.sql</code> 和 <code>.sql.gz</code> （ <code>/docker-entrypoint-initdb.d</code>文件夹中）.文件将按照字幕顺序执行. 你可以轻松使用dump备份填充，. 默认情况下，sql文件将被保存在 <code>MYSQL_DATABASE</code> 指定的数据库中.</p><h1 id="Caveats-告诫"><a href="#Caveats-告诫" class="headerlink" title="Caveats//告诫"></a>Caveats//告诫</h1><h2 id="数据存储在哪里"><a href="#数据存储在哪里" class="headerlink" title="数据存储在哪里"></a>数据存储在哪里</h2><p>重要内容：有几种方式在容器运行时存储数据. 我们推荐 <code>mysql</code> 用户熟悉可用的选项,包括:</p><ul><li>让docker使用自己的内部volume 将数据库文件写入主机系统上的磁盘（而不在容器内）从而管理数据库数据的存储。这也是默认的配置，也非常简单透明。缺点是相比直接部署<strong>找文件困难</strong>.</li><li>在主机上创建一个数据目录，并将其装载到容器内部的一个目录中，使得数据库文件放置在主机已知的位置上，更轻松访问文件，缺点是需要确保目录存在，且有权限和安全机制</li></ul><p>Docker 文档是理解不同存储选项和变量的最好起步，并且有很多博客论坛讨论并提供建议，我们将简单展示基本过程:</p><ol><li><p>创建文件夹在主机如 <code>/my/own/datadir</code>.</p></li><li><p>启动 <code>mysql</code> 容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure><p><code>-v /my/own/datadir:/var/lib/mysql</code> 将 <code>/my/own/datadir</code> 目录从主机装入容器中作为 <code>/var/lib/mysql</code>  默认不传-v情况下，mysql将写入其他数据文件.</p></li></ol><h2 id="直到初始化完成才有连接"><a href="#直到初始化完成才有连接" class="headerlink" title="直到初始化完成才有连接"></a>直到初始化完成才有连接</h2><p>如果容器启动没有初始化数据库，则创建默认数据库. 初始化完成之前不会接受传入连接. 在使用自动化工具如 <code>docker-compose</code>同时启动多个容器时,这可能会导致问题.</p><p>如果应用尝试连接不提供服务的mysql，需要继续重试等待连接成功. 官方示例, 详见 <a href="https://github.com/docker-library/wordpress/blob/1b48b4bccd7adb0f7ea1431c7b470a40e186f3da/docker-entrypoint.sh#L195-L235">WordPress</a> or <a href="https://github.com/docker-library/docs/blob/9660a0cccb87d8db842f33bc0578d769caaf3ba9/bonita/stack.yml#L28-L44">Bonita</a>.</p><h2 id="现用数据库使用"><a href="#现用数据库使用" class="headerlink" title="现用数据库使用"></a>现用数据库使用</h2><p>如果在一个有mysql数据目录的volume启动mqsql，应省略 <code>$MYSQL_ROOT_PASSWORD</code>命令; 及时填写也不会生效, 且不会更改预先存在的数据库.</p><h2 id="以任意用户身份运行"><a href="#以任意用户身份运行" class="headerlink" title="以任意用户身份运行"></a>以任意用户身份运行</h2><p>如果你正确设置了目录权限，或者你需要使用特定的uid/gid运行mysqld，则可以通过 <code>--user</code> 设为任意值（root/0外）来实现所需的权限/配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir data</span><br><span class="line">$ ls -lnd data</span><br><span class="line">drwxr-xr-x 2 1000 1000 4096 Aug 27 15:54 data</span><br><span class="line">$ docker run -v <span class="string">&quot;<span class="variable">$PWD</span>/data&quot;</span>:/var/lib/mysql --user 1000:1000 --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure><h2 id="创建备份"><a href="#创建备份" class="headerlink" title="创建备份"></a>创建备份</h2><p>大多数工具都会正常工作,尽管他们的使用在某些情况下可能有点复杂， 以确保可以访问mysqld服务器，确保这一点的一个简单方法是使用 <code>docker exec</code> 并从同一容器运行工具，如:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> some-mysql sh -c <span class="string">&#x27;exec mysqldump --all-databases -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27;</span> &gt; /some/path/on/your/host/all-databases.sql</span><br></pre></td></tr></table></figure><h2 id="从备份还原数据"><a href="#从备份还原数据" class="headerlink" title="从备份还原数据"></a>从备份还原数据</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -i some-mysql sh -c <span class="string">&#x27;exec mysql -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27;</span> &lt; /some/path/on/your/host/all-databases.sqlwith any relevant licenses <span class="keyword">for</span> all software contained within.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;link:&lt;a href=&quot;https://hub.docker.com/_/mysql?tab=description&amp;amp;page=1&amp;amp;ordering=last_updated&quot;&gt;mysql-docker&lt;/a&gt;&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="docker" scheme="http://zehai.info/categories/docker/"/>
    
    
      <category term="mysql" scheme="http://zehai.info/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>currying</title>
    <link href="http://zehai.info/2021/01/15/2021-01-15-currying/"/>
    <id>http://zehai.info/2021/01/15/2021-01-15-currying/</id>
    <published>2021-01-15T06:54:00.000Z</published>
    <updated>2021-05-28T06:48:48.168Z</updated>
    
    <content type="html"><![CDATA[<p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 add 函数，一次传入两个参数即可</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设有一个 curry 函数可以做到柯里化</span></span><br><span class="line"><span class="keyword">var</span> addCurry = curry(add);</span><br><span class="line">addCurry(<span class="number">1</span>)(<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://zehai.info/categories/JavaScript/"/>
    
    
      <category term="currying" scheme="http://zehai.info/tags/currying/"/>
    
  </entry>
  
  <entry>
    <title>closure</title>
    <link href="http://zehai.info/2021/01/08/2021-01-08-closure/"/>
    <id>http://zehai.info/2021/01/08/2021-01-08-closure/</id>
    <published>2021-01-08T06:53:22.000Z</published>
    <updated>2021-05-28T06:48:48.168Z</updated>
    
    <content type="html"><![CDATA[<p>前置知识：JavaScript是静态作用域</p><p>闭包：访问自由变量的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;<span class="comment">//既不是foo的局部变量，也不是foo函数的参数，a为自由变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>即使上下文被销毁，它仍然存在，因为在<strong>作用域链</strong>上被引用了，是js的一个特性，目前如PHP，Java不会原生支持</p><p><strong>面试题</strong></p><p>常见的新手面试题，我遇到过好几次（作用域+闭包考点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();</span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//closure </span></span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();<span class="comment">//不用找global的i</span></span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前置知识：JavaScript是静态作用域&lt;/p&gt;
&lt;p&gt;闭包：访问自由变量的函数&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://zehai.info/categories/JavaScript/"/>
    
    
      <category term="closure" scheme="http://zehai.info/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>vscode访问服务器文件</title>
    <link href="http://zehai.info/2021/01/05/2021-01-05-vscoderemote/"/>
    <id>http://zehai.info/2021/01/05/2021-01-05-vscoderemote/</id>
    <published>2021-01-05T06:49:27.000Z</published>
    <updated>2021-05-28T06:48:48.167Z</updated>
    
    <content type="html"><![CDATA[<p>1.install <code>remote ssh</code> in vscode</p><p>2.click <code>remote explorer</code> and select <code>ssh targets</code></p><p>3.click remote ssh <code>configure</code> or press <code>F1</code> and input remote-ssh:Open configuration file</p><p>4.selete path <code>~/.ssh/config</code>,and modify config file</p><p>if you dont have rsa ,please generate keys before</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//optional</span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="meta">#</span><span class="bash"> passphrase can be empty and <span class="keyword">then</span> generate keys <span class="keyword">in</span> `~/.ssh`</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> put *.pub (public key) to your server (~/.ssh/) and excute `cat id_rsa.pub &gt;&gt; authorized_keys` to merge Previous file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> now rsa keys are ready</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host alias</span><br><span class="line">    HostName 8.888.88.8</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">    RSAAuthentication yes</span><br><span class="line">    PubkeyAuthentication yes</span><br><span class="line">    PasswordAuthentication no</span><br></pre></td></tr></table></figure><ul><li>Host alias–&gt;your remote server name</li><li>hostName–&gt;server ip</li><li>User–&gt;login username</li><li>IdentityFile–&gt;private key path</li><li>RSAAuthentication–&gt;optional</li><li>PubkeyAuthentication–&gt;optional</li><li>PasswordAuthentication–&gt;no password login</li></ul><p>5.login without password ready</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.install &lt;code&gt;remote ssh&lt;/code&gt; in vscode&lt;/p&gt;
&lt;p&gt;2.click &lt;code&gt;remote explorer&lt;/code&gt; and select &lt;code&gt;ssh targets&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.clic
      
    
    </summary>
    
      <category term="skills" scheme="http://zehai.info/categories/skills/"/>
    
    
      <category term="vscode" scheme="http://zehai.info/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>2020-10-16-promise用法</title>
    <link href="http://zehai.info/2020/10/16/2020-10-16-promise%E7%94%A8%E6%B3%95/"/>
    <id>http://zehai.info/2020/10/16/2020-10-16-promise用法/</id>
    <published>2020-10-16T10:42:09.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>ECMAscript 6 原生提供了 Promise 对象。</p><p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p><h3 id="Promise-对象有以下两个特点"><a href="#Promise-对象有以下两个特点" class="headerlink" title="Promise 对象有以下两个特点:"></a>Promise 对象有以下两个特点:</h3><p>1、对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：</p><ul><li>pending: 初始状态，不是成功或失败状态。</li><li>fulfilled: 意味着操作成功完成。</li><li>rejected: 意味着操作失败。</li></ul><p>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。</p><p>2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class="line">    &#x2F;&#x2F; 异步处理</span><br><span class="line">    &#x2F;&#x2F; 处理结束后、调用resolve 或 reject</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上来自:<a href="https://www.runoob.com/w3cnote/javascript-promise-object.html">菜鸟https://www.runoob.com/w3cnote/javascript-promise-object.html</a></p><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>因为在<a href="/2020/01/07/2020-01-07-%E5%85%B3%E4%BA%8EPromise%E7%9A%84%E6%80%9D%E8%80%83/">2020年01月07日有一篇文章</a>讲了使用promise实现延时队列的一道面试题，因为之前写业务没有用到过所以一直以为用处不大，但今天对接阿里的<code>录音文件识别</code>转文字的接口中，示例代码是一个setInterval轮询得到结果的一种方式，但是他带来了一个很严重的问题</p><blockquote><p>！！没有办法返回前端转文字的结果！！</p></blockquote><p>大概代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//url:https://help.aliyun.com/document_detail/94242.html?spm=a2c4g.11174283.6.601.15eb7275a8rq00</span></span><br><span class="line"><span class="comment">// 这段代码会异步执行，可以得到结果，但是直接用这个代码返回给前端</span></span><br><span class="line">client.submitTask(taskParams, options).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">        <span class="comment">// 服务端响应信息的状态描述StatusText。</span></span><br><span class="line">        <span class="keyword">var</span> statusText = response.StatusText;</span><br><span class="line">        <span class="keyword">if</span> (statusText != <span class="string">&#x27;SUCCESS&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别请求响应失败!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别请求响应成功!&#x27;</span>);</span><br><span class="line">        <span class="comment">// 获取录音文件识别请求任务的TaskId，以供识别结果查询使用。</span></span><br><span class="line">        <span class="keyword">var</span> taskId = response.TaskId;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以TaskId为查询参数，提交识别结果查询请求。</span></span><br><span class="line"><span class="comment">         * 以轮询的方式进行识别结果的查询，直到服务端返回的状态描述为&quot;SUCCESS&quot;、SUCCESS_WITH_NO_VALID_FRAGMENT，</span></span><br><span class="line"><span class="comment">         * 或者为错误描述，则结束轮询。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">var</span> taskIdParams = &#123;</span><br><span class="line">            TaskId : taskId</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            client.getTaskResult(taskIdParams).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;识别结果查询响应：&#x27;</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">                <span class="keyword">var</span> statusText = response.StatusText;</span><br><span class="line">                <span class="keyword">if</span> (statusText == <span class="string">&#x27;RUNNING&#x27;</span> || statusText == <span class="string">&#x27;QUEUEING&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 继续轮询，注意间隔周期。</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (statusText == <span class="string">&#x27;SUCCESS&#x27;</span> || statusText == <span class="string">&#x27;SUCCESS_WITH_NO_VALID_FRAGMENT&#x27;</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别成功：&#x27;</span>);</span><br><span class="line">                        <span class="keyword">var</span> sentences = response.Result;</span><br><span class="line">                        <span class="built_in">console</span>.log(sentences);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别失败!&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 退出轮询</span></span><br><span class="line">                    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(error);</span><br><span class="line">                <span class="comment">// 异常情况，退出轮询。</span></span><br><span class="line">                <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">10000</span>);</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>使用promise进行包裹，等到promise内部的函数取到了结果在返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (statusText == <span class="string">&#x27;SUCCESS&#x27;</span> || statusText == <span class="string">&#x27;SUCCESS_WITH_NO_VALID_FRAGMENT&#x27;</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别成功：&#x27;</span>);</span><br><span class="line">                        <span class="keyword">var</span> sentences = response.Result;</span><br><span class="line">                        <span class="built_in">console</span>.log(sentences);</span><br><span class="line">  <span class="comment">//这里新增resolve</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外层通过如下代码实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var promise &#x3D; new Promise(function(resolve, reject) &#123;</span><br><span class="line">    &#x2F;&#x2F; 异步处理</span><br><span class="line">    &#x2F;&#x2F; 处理结束后、调用resolve 或 reject</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getWords</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        client</span><br><span class="line">          .submitTask(taskParams, options)</span><br><span class="line">          .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">            <span class="comment">// 服务端响应信息的状态描述StatusText。</span></span><br><span class="line">            <span class="keyword">const</span> statusText = response.StatusText;</span><br><span class="line">            <span class="keyword">if</span> (statusText != <span class="string">&#x27;SUCCESS&#x27;</span>) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别请求响应失败!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别请求响应成功!&#x27;</span>);</span><br><span class="line">            <span class="comment">// 获取录音文件识别请求任务的TaskId，以供识别结果查询使用。</span></span><br><span class="line">            <span class="keyword">const</span> taskId = response.TaskId;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 以TaskId为查询参数，提交识别结果查询请求。</span></span><br><span class="line"><span class="comment">             * 以轮询的方式进行识别结果的查询，直到服务端返回的状态描述为&quot;SUCCESS&quot;、SUCCESS_WITH_NO_VALID_FRAGMENT，</span></span><br><span class="line"><span class="comment">             * 或者为错误描述，则结束轮询。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">const</span> taskIdParams = &#123;</span><br><span class="line">              TaskId: taskId,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              client</span><br><span class="line">                .getTaskResult(taskIdParams)</span><br><span class="line">                .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="string">&#x27;识别结果查询响应：&#x27;</span>);</span><br><span class="line">                  <span class="built_in">console</span>.log(response);</span><br><span class="line">                  <span class="keyword">const</span> statusText = response.StatusText;</span><br><span class="line">                  <span class="keyword">if</span> (statusText == <span class="string">&#x27;RUNNING&#x27;</span> || statusText == <span class="string">&#x27;QUEUEING&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 继续轮询，注意间隔周期。</span></span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (</span><br><span class="line">                      statusText == <span class="string">&#x27;SUCCESS&#x27;</span> ||</span><br><span class="line">                      statusText == <span class="string">&#x27;SUCCESS_WITH_NO_VALID_FRAGMENT&#x27;</span></span><br><span class="line">                    ) &#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别成功：&#x27;</span>);</span><br><span class="line">                      <span class="keyword">let</span> sentences = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                      <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> response.Result.Sentences) &#123;</span><br><span class="line">                        sentences += s.Text;</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="built_in">console</span>.log(response.Result);</span><br><span class="line">                      resolve(sentences);<span class="comment">//**重点**//</span></span><br><span class="line">                      <span class="comment">// return sentences;</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别失败!&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 退出轮询</span></span><br><span class="line">                    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                  <span class="built_in">console</span>.error(error);</span><br><span class="line">                  <span class="comment">// 异常情况，退出轮询。</span></span><br><span class="line">                  <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">10000</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(error);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> getWords();<span class="comment">//返回前端，翻译结果</span></span><br></pre></td></tr></table></figure><blockquote><p>另外记录一件事情，左侧单元图标地址：<a href="https://fontawesome.com/v4.7.0/icons/">https://fontawesome.com/v4.7.0/icons/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h1&gt;&lt;p&gt;ECMAscript 6 原生提供了 Promise 对象。&lt;/p&gt;
&lt;p&gt;Promise 对象代表了未来将要发生的事件，用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NodeJS</title>
    <link href="http://zehai.info/2020/09/27/2020-09-27-NodeJS/"/>
    <id>http://zehai.info/2020/09/27/2020-09-27-NodeJS/</id>
    <published>2020-09-27T10:42:36.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/theanarkh/understand-nodejs">https://github.com/theanarkh/understand-nodejs</a></p></blockquote><p>文档还是不错的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/theanarkh/understand-nodejs&quot;&gt;https://github.com/theanarkh/understand-nodejs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jupyter</title>
    <link href="http://zehai.info/2020/09/25/2020-09-25-Jupyter/"/>
    <id>http://zehai.info/2020/09/25/2020-09-25-Jupyter/</id>
    <published>2020-09-25T07:48:37.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>Jupiter = Julia + Python + R</p><blockquote><p>Jupyter notebook（<a href="https://link.zhihu.com/?target=http%3A//jupyter.org/">http://jupyter.org/</a>） 是一种 Web 应用，能让用户将说明文本、数学方程、代码和可视化内容全部组合到一个易于共享的文档中。</p></blockquote><h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><ul><li>将代码和文档结合在一起，更直观的编写人工智能，大数据的代码</li><li>分块运行</li><li>直接运行shell不需要切换环境</li><li>so on</li></ul><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><ol><li>Download images</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$docker pull jupyter jupyter&#x2F;scipy-notebook:latest</span><br><span class="line">$docker run -itd --rm -p 1000:8888 -e JUPYTER_ENABLE_LAB&#x3D;yes -v &#x2F;home&#x2F;zehai&#x2F;jupyter:&#x2F;home&#x2F;jovyan&#x2F;work --name jupyter jupyter&#x2F;scipy-notebook:latest</span><br></pre></td></tr></table></figure><ol start="2"><li>docker logs -f  container’s ID and find token</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">To access the notebook, open this file in a browser:</span><br><span class="line">    file:&#x2F;&#x2F;&#x2F;home&#x2F;jovyan&#x2F;.local&#x2F;share&#x2F;jupyter&#x2F;runtime&#x2F;nbserver-6-open.html</span><br><span class="line">Or copy and paste one of these URLs:</span><br><span class="line">    http:&#x2F;&#x2F;896bb1e66101:8888&#x2F;?token&#x3D;fda8565a9b5cd5b8c621b45322ee72f716fd7ddea089fb51</span><br><span class="line"> or http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;?token&#x3D;fda8565a9b5cd5b8c621b45322ee72f716fd7ddea089fb51</span><br></pre></td></tr></table></figure><ol start="3"><li>more info visit official <a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/">docs</a></li><li>enjoy (pics powered by cherevero)</li></ol><p><img src="https://pics.tbjd.xyz/images/2020/09/25/3318a2fadaf085f2bee7f0de3b42971c.png" alt="3318a2fadaf085f2bee7f0de3b42971c.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what&quot;&gt;&lt;/a&gt;what&lt;/h1&gt;&lt;p&gt;Jupiter = Julia + Python + R&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jupyter noteb
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>chevereto</title>
    <link href="http://zehai.info/2020/09/15/2020-09-15-Chevereto/"/>
    <id>http://zehai.info/2020/09/15/2020-09-15-Chevereto/</id>
    <published>2020-09-15T02:16:33.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>To solve some problems</p><ul><li>some web only use markdown and can’t upload pictures,such as v2ex.com</li><li>some pics you don’t want to give it to others for long time,such as your interesting story </li><li>give your blog’s  can speed when download bigger pics</li><li>and so on</li></ul><p>Picture Bed can offer you a excellent platform to share your pictures and protect them, however it has a problem that you need a server to run the service,even though  you can use 七牛云,alioss,weibo for free.</p><h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>Chevereto is aim what I find</p><ul><li>dockerhub has chevereto images</li><li>Combined with <a href="https://getsharex.com/">ShareX</a> (only for windows😢),chevereto can write markdown essay easily</li><li>it has api ,you can make it stronger</li><li>Chevereto Free v1.2.2 now</li><li>Something others you can discover by yourself</li></ul><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>Chevereto is a php project , I use docker to run it </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker pull nmtan/chevereto:latest</span><br><span class="line"></span><br><span class="line">//use docker-compose.yml(next block)</span><br><span class="line"></span><br><span class="line">// or docker run </span><br><span class="line">docker run -it --name chevereto -d     -p 8000:80     -v &quot;/home/xxx/images&quot;:/var/www/html/images     -e &quot;CHEVERETO_DB_HOST=127.0.0.1&quot;     -e &quot;CHEVERETO_DB_USERNAME=root&quot;     -e &quot;CHEVERETO_DB_PASSWORD=rootpass&quot;     -e &quot;CHEVERETO_DB_NAME=chevereto&quot;     -e &quot;CHEVERETO_DB_PREFIX=chv_&quot;  nmtan/chevereto</span><br><span class="line">//-v save photos in server instead of container</span><br><span class="line">//-e mysql:5.7.31 host,username,password,db_name(db must exist first)</span><br><span class="line">//open chrome and input 127.0.0.1:8000</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;this is docker-compose.yml</span><br><span class="line">version: &#39;3&#39;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mariadb</span><br><span class="line">    volumes:</span><br><span class="line">      - .&#x2F;database:&#x2F;var&#x2F;lib&#x2F;mysql:rw</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - private</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: xxxxx</span><br><span class="line">      MYSQL_DATABASE: xxxxx</span><br><span class="line">      MYSQL_USER: xxxxx</span><br><span class="line">      MYSQL_PASSWORD: xxxxx</span><br><span class="line"></span><br><span class="line">  chevereto:</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    image: nmtan&#x2F;chevereto</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - private</span><br><span class="line">    environment:</span><br><span class="line">      CHEVERETO_DB_HOST: db</span><br><span class="line">      CHEVERETO_DB_USERNAME: xxxxxx</span><br><span class="line">      CHEVERETO_DB_PASSWORD: xxxxx</span><br><span class="line">      CHEVERETO_DB_NAME: xxxxx</span><br><span class="line">      CHEVERETO_DB_PREFIX: chv_</span><br><span class="line">    volumes:</span><br><span class="line">      - .&#x2F;images:&#x2F;var&#x2F;www&#x2F;html&#x2F;images:rw</span><br><span class="line">      - .&#x2F;php.ini:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;php.ini:ro</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  private:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; start command</span><br><span class="line">nohup docker-compose up  &amp;&gt; run.log &amp;</span><br><span class="line">disown</span><br></pre></td></tr></table></figure><p>You maybe run into a stone wall when you first visit 127.0.0.1:8000</p><ul><li><p>Before you can use <code>docker exec -it chevereto bash</code> into container /var/www/html</p></li><li><p>no permission write phots to /home/xxx/images,you can use <code>chmod -R 777 /home/xxx/images</code></p></li><li>no permission update chevereto from 1.1.4 to1.2.2 ,<code>no update possible: /app/install/update/temp/ path</code>,that is no temp folder in /app/install/update/ under version 1.2.0,you can mkdir temp and then chmod -R 777 ./temp and then refresh the webpage ,the prics bed will update successfully</li></ul><p>So , you can use ip address to visit your chevereto . However , we usually use domain name such as example.com to visit web, a https isn ecessary as well</p><ul><li>1.Use <a href="https://yundunnext.console.aliyun.com/?spm=5176.2020520163.0.0.475556a7iLgQoU&amp;p=cas">aliyun</a> to apply  a free ssl license for a domain name such as pics.example.com</li><li>2.Download pem and keys to your server and put it in nginx conf folder</li><li>3.Use the conf as follows</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen 80;</span><br><span class="line">      server_name  pics.example.com;</span><br><span class="line">      return 301 https:&#x2F;&#x2F;pics.example.com$request_uri;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      listen 443 ssl;</span><br><span class="line">      server_name  pics.example.com;</span><br><span class="line">      gzip on;    </span><br><span class="line"></span><br><span class="line">      ssl_certificate cert&#x2F;xxxxxx9_pics.example.com.pem; # pem&#39;s filename</span><br><span class="line">      ssl_certificate_key cert&#x2F;xxxxxx9_pics.example.com.key;# key&#39;s filename</span><br><span class="line"></span><br><span class="line">      location &#x2F; &#123;</span><br><span class="line">          proxy_redirect off;</span><br><span class="line">          proxy_pass http:&#x2F;&#x2F;dockername;</span><br><span class="line"></span><br><span class="line">          proxy_set_header  Host                $http_host;</span><br><span class="line">          proxy_set_header  X-Real-IP           $remote_addr;</span><br><span class="line">          proxy_set_header  X-Forwarded-Ssl     on;</span><br><span class="line">          proxy_set_header  X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_set_header  X-Forwarded-Proto   $scheme;</span><br><span class="line">          proxy_set_header  X-Frame-Options     SAMEORIGIN;</span><br><span class="line"></span><br><span class="line">          client_max_body_size        100m;</span><br><span class="line">          client_body_buffer_size     128k;</span><br><span class="line"></span><br><span class="line">          proxy_buffer_size           4k;</span><br><span class="line">          proxy_buffers               4 32k;</span><br><span class="line">          proxy_busy_buffers_size     64k;</span><br><span class="line">          proxy_temp_file_write_size  64k;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>And then you can visit <code>https://pics.example.com</code> </li></ol></li></ul><p>That‘s my story that building pics bed  ,and hope to help you.</p><p><code>2020-09-28 append</code></p><p>use <code>picgo</code>，upload pictures in typora to chevereto</p><ol><li><p>GitHub download picgo,mac use <a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.3.0-beta.3/PicGo-2.3.0-beta.3.dmg">.dmp</a>,and then install it</p></li><li><p>open <code>插件设置</code>,search <code>chevereto</code> and install <code>chevereto 1.0.0</code></p></li><li><p>Open <code>图床设置&gt;Chevereto Uploader</code> and put in params,</p><p>Url is your upload service ip/domain</p><p>Key is chevereto api in <code>Dashboard&gt;Settings&gt;API&gt;API v1 key</code></p><p>param is not in use now</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Url:https:&#x2F;&#x2F;example.com&#x2F;api&#x2F;1&#x2F;upload</span><br><span class="line">Key:xxx</span><br></pre></td></tr></table></figure><ol start="4"><li>Click <code>确定</code> and <code>设为默认图库</code></li><li>make sure server is on <code>PicGo设置&gt;设置Server&gt;点击设置</code>,if it is on ,noting should be done</li></ol><p>and then we modify config in typaro</p><ol><li>Open Typora and open ‘preferences&gt;Images` </li><li>Choose Upload images in when Insert and check <code>apply above rules to local images</code> and <code>apply above rules to online images</code> in option, and I suggest you check both of them to approve all pics managed by chevereto</li><li>Choose <code>PicGo.app</code> in images Uploader and click <code>Test Uploader</code> to test your upload pictures automatically</li></ol><p>for more information ,youcan visit </p><ul><li><a href="https://github.com/Molunerfinn/PicGo">PicGo</a> and <a href="https://picgo.github.io/PicGo-Core-Doc/">PicGo-Core</a></li><li><a href="https://blog.csdn.net/qq_19564393/article/details/108506062">Upload your pictures in personal album instead of visitors’ albulm</a></li><li><a href="https://v3-docs.chevereto.com/API/V1.html#api-key">Chevereto API</a></li></ul><h1 id="thanks"><a href="#thanks" class="headerlink" title="thanks"></a>thanks</h1><ul><li><a href="https://chevereto.com/">Chevereto</a></li><li><a href="https://getsharex.com/">ShareX</a></li><li><a href="https://www.ioiox.com/archives/80.html">ioiox’s blog</a></li><li><a href="https://dana5haw.com/posts/Docker-Image-Hosting-Chevereto.html">dana5haw’s blog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what&quot;&gt;&lt;/a&gt;what&lt;/h1&gt;&lt;p&gt;To solve some problems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some web only use markdown
      
    
    </summary>
    
      <category term="Chevereto" scheme="http://zehai.info/categories/Chevereto/"/>
    
    
      <category term="pictureBed" scheme="http://zehai.info/tags/pictureBed/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="http://zehai.info/2020/09/14/2020-09-14-RabbitMQ/"/>
    <id>http://zehai.info/2020/09/14/2020-09-14-RabbitMQ/</id>
    <published>2020-09-14T04:13:40.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>MQ-message queue</p><p>三足鼎立</p><p>rocketmq​​ -Made by Java 吞吐量高一些 阿里中间件</p><p>rabbitmq -Made by Erlang</p><p>Kafka-</p><p><img  src="../img/mq.jpg" align='left'/></p><p>以后有更多的了解再补充性能/功能差距</p><h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>功能：解耦(双方通过mq交互)、异步、削峰</p><p>应用：</p><ul><li>阿里双11</li></ul><p>问题：</p><ul><li>处理好新增的复杂性</li><li>处理好系统可用性</li></ul><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>之所以选择rabbitmq是因为rocketmq的nameserver所需要的内存太大了，更何况boker，对于1C2G的乞丐机器来说根本跑不起来</p><h2 id="1-docker-run"><a href="#1-docker-run" class="headerlink" title="1.docker run"></a>1.docker run</h2><p>Because of rocketmq need more than </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br><span class="line"></span><br><span class="line">docker run -dit --name rabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br><span class="line"></span><br><span class="line">--name containername</span><br><span class="line">-e RABBITMQ_DEFAULT_USER 参数用户名，密码同理</span><br><span class="line">-p 端口映射，主机：容器，15672-UI，5672-service</span><br><span class="line">rabbitmq:management image&#x27;s name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-Usage"><a href="#2-Usage" class="headerlink" title="2.Usage"></a>2.Usage</h2><p>1.open chrome and input ‘localhost:15672’ or ‘192.168.1.1:15672’ then you can touch rabbitmq UI</p><p>Overview–the queued msg, msg rate in your server,  some global counts, your nodes stats (if u use the above method,you only see one node in the screen ),you also can build a cluster with more nodes</p><p>Connections–</p><p>Channels–</p><p>Exchanges–direct,fanout,headers,match,trace,topic</p><p>Queses–</p><p>Admin–users management with passport &amp;&amp; permission</p><p>2.use 5672 in your code</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">amqp.connect(&#123;</span><br><span class="line">            protocol: <span class="string">&#x27;amqp&#x27;</span>,</span><br><span class="line">            hostname: <span class="string">&#x27;example.com&#x27;</span>,<span class="comment">//localhost</span></span><br><span class="line">            port: <span class="string">&#x27;5672&#x27;</span>,</span><br><span class="line">            username: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">            password: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">            vhost: <span class="string">&#x27;/&#x27;</span>,<span class="comment">//important</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>more in official docs–&gt;<a href="https://www.rabbitmq.com/tutorials/tutorial-one-javascript.html"> I’m doc</a></p><p>or some blogs–&gt;<a href="https://www.cnblogs.com/wukong-holmes/p/9306733.html">I’m blog</a></p><p>or my GitHub–&gt;<a href="https://github.com/ShawnGoethe/phones/tree/master/app/controller/pmq.js">click here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what&quot;&gt;&lt;/a&gt;what&lt;/h1&gt;&lt;p&gt;MQ-message queue&lt;/p&gt;
&lt;p&gt;三足鼎立&lt;/p&gt;
&lt;p&gt;rocketmq​​ -Made by Java 吞
      
    
    </summary>
    
      <category term="MQ" scheme="http://zehai.info/categories/MQ/"/>
    
    
      <category term="basic" scheme="http://zehai.info/tags/basic/"/>
    
  </entry>
  
  <entry>
    <title>EventLoop Source</title>
    <link href="http://zehai.info/2020/07/24/2020-07-23-EventLoop2/"/>
    <id>http://zehai.info/2020/07/24/2020-07-23-EventLoop2/</id>
    <published>2020-07-24T03:49:24.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eventLoop"><a href="#eventLoop" class="headerlink" title="eventLoop"></a>eventLoop</h1><p>之前也有过章节<br><a href="/2020/04/10/2020-04-10-eventloop/">node整理</a><br><a href="/Nodejs/">Node.js</a></p><p>有看到<a href="https://zhuanlan.zhihu.com/p/34182184">石墨技术文档</a></p><p><a href="https://cnodejs.org/topic/5a9108d78d6e16e56bb80882">cnode技术文档</a>，作者：youth7</p><p>记录以下知识点：</p><ul><li><strong>nodejs的event是基于libuv</strong>，<strong>浏览器的event loop则在<a href="https://www.w3.org/TR/html5/webappapis.html#event-loops">html5的规范</a>中明确定义</strong>，两个事物有明显的区别</li><li><code>process.nextTick()</code>在6个阶段结束的时候都会执行</li></ul><h2 id="eventLoop-1"><a href="#eventLoop-1" class="headerlink" title="eventLoop"></a>eventLoop</h2><table><thead><tr><th>timers</th><th>执行<code>setTimeout()</code> 和 <code>setInterval()</code>中到期的callback</th></tr></thead><tbody><tr><td>I/O callbacks</td><td>上一轮循环中有少数的I/Ocallback会被延迟到这一轮的这一阶段执行</td></tr><tr><td>idle, prepare</td><td>仅内部使用</td></tr><tr><td>poll</td><td>最为重要的阶段，执行I/O callback，在适当的条件下会阻塞在这个阶段</td></tr><tr><td>check</td><td>执行setImmediate的callback</td></tr><tr><td>close callbacks</td><td>执行close事件的callback，例如<code>socket.on(&quot;close&quot;,func)</code></td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   ┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;─────┤  connections, │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">   └───────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># /deps/uv/src/unix/core.c</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_run</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, uv_run_mode mode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> timeout;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  <span class="keyword">int</span> ran_pending;</span><br><span class="line"></span><br><span class="line">  r = uv__loop_alive(loop);</span><br><span class="line">  <span class="comment">// if(uv_has_active_hanles||uv_has_active_reqs || lop-&gt;closing_handles!=NULL)retrun true </span></span><br><span class="line">  <span class="keyword">if</span> (!r)</span><br><span class="line">    uv__update_time(loop);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (r != <span class="number">0</span> &amp;&amp; loop-&gt;stop_flag == <span class="number">0</span>) &#123;</span><br><span class="line">    uv__update_time(loop);</span><br><span class="line">    <span class="comment">// main</span></span><br><span class="line">    uv__run_timers(loop);<span class="comment">//timer phase</span></span><br><span class="line">    ran_pending = uv__run_pending(loop);<span class="comment">//IO callback pharse</span></span><br><span class="line">    uv__run_idle(loop);<span class="comment">//idle phase</span></span><br><span class="line">    uv__run_prepare(loop);<span class="comment">// prepare phase</span></span><br><span class="line">    <span class="comment">// main end</span></span><br><span class="line"></span><br><span class="line">    timeout = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || mode == UV_RUN_DEFAULT)</span><br><span class="line">      timeout = uv_backend_timeout(loop);</span><br><span class="line"></span><br><span class="line">    uv__io_poll(loop, timeout);<span class="comment">//poll phase</span></span><br><span class="line">    uv__run_check(loop);<span class="comment">//check phase</span></span><br><span class="line">    uv__run_closing_handles(loop);<span class="comment">//closing pharse</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mode == UV_RUN_ONCE) &#123;</span><br><span class="line">      <span class="comment">/* UV_RUN_ONCE implies forward progress: at least one callback must have</span></span><br><span class="line"><span class="comment">       * been invoked when it returns. uv__io_poll() can return without doing</span></span><br><span class="line"><span class="comment">       * I/O (meaning: no callbacks) when its timeout expires - which means we</span></span><br><span class="line"><span class="comment">       * have pending timers that satisfy the forward progress constraint.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * UV_RUN_NOWAIT makes no guarantees about progress so it&#x27;s omitted from</span></span><br><span class="line"><span class="comment">       * the check.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="comment">// UV_RUN_ONCE 至少有一个回调执行,不然该循环就空转了，满足前进要求</span></span><br><span class="line">      <span class="comment">// 这也是[文章](https://zehai.info/2020/04/10/2020-04-10-eventloop/)中写到：</span></span><br><span class="line">      <span class="comment">// poll为空，eventloop将检查timer是否有快到的，如果需要执行，eventloop将要进入timers阶段来顺序执行timer callback</span></span><br><span class="line">      uv__update_time(loop);</span><br><span class="line">      uv__run_timers(loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = uv__loop_alive(loop);</span><br><span class="line">    <span class="keyword">if</span> (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The if statement lets gcc compile it to a conditional store. Avoids</span></span><br><span class="line"><span class="comment">   * dirtying a cache line.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;stop_flag != <span class="number">0</span>)</span><br><span class="line">    loop-&gt;stop_flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="timers-phase"><a href="#timers-phase" class="headerlink" title="timers phase"></a>timers phase</h2><p>执行<code>setTimeout()</code> 和 <code>setInterval()</code>中到期的callback</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__run_timers</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">heap_node</span>* <span class="title">heap_node</span>;</span></span><br><span class="line">  <span class="keyword">uv_timer_t</span>* handle;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    heap_node = heap_min(timer_heap(loop));</span><br><span class="line">    <span class="keyword">if</span> (heap_node == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 取出堆中最快要被执行的timer</span></span><br><span class="line">    <span class="comment">// #define container_of(ptr, type, member) </span></span><br><span class="line">  <span class="comment">// ((type *) ((char *) (ptr) - offsetof(type, member)))</span></span><br><span class="line">    <span class="comment">// 没看懂 handle是怎么生成的</span></span><br><span class="line">    handle = container_of(heap_node, <span class="keyword">uv_timer_t</span>, heap_node);</span><br><span class="line">    <span class="keyword">if</span> (handle-&gt;timeout &gt; loop-&gt;time)<span class="comment">//执行时间大于eventloop循环一次时间，退出phase下次再说</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    uv_timer_stop(handle);<span class="comment">// remove handle</span></span><br><span class="line">    uv_timer_again(handle);<span class="comment">// 多次重复的timer再塞进去</span></span><br><span class="line">    handle-&gt;timer_cb(handle);<span class="comment">// invoke callback</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-O-callbacks"><a href="#I-O-callbacks" class="headerlink" title="I/O callbacks"></a>I/O callbacks</h2><p>上一轮循环中有少数的I/Ocallback会被延迟到这一轮的这一阶段执行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//deps/uv/src/unix/core.c</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uv__run_pending</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  QUEUE pq;</span><br><span class="line">  <span class="keyword">uv__io_t</span>* w;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (QUEUE_EMPTY(&amp;loop-&gt;pending_queue))<span class="comment">//isEmpty</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  QUEUE_MOVE(&amp;loop-&gt;pending_queue, &amp;pq);<span class="comment">//move</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!QUEUE_EMPTY(&amp;pq)) &#123;</span><br><span class="line">    q = QUEUE_HEAD(&amp;pq);<span class="comment">//find</span></span><br><span class="line">    QUEUE_REMOVE(q);<span class="comment">//pop</span></span><br><span class="line">    QUEUE_INIT(q);</span><br><span class="line">    w = QUEUE_DATA(q, <span class="keyword">uv__io_t</span>, pending_queue);</span><br><span class="line">    w-&gt;cb(loop, w, POLLOUT);<span class="comment">//unitl queue empty</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Idle-and-prepare-phase"><a href="#Idle-and-prepare-phase" class="headerlink" title="Idle and prepare phase"></a>Idle and prepare phase</h2><p>/<em> loop </em>/</p><p>void uv__run_idle(uv_loop_t* loop);</p><p>void uv__run_check(uv_loop_t* loop);</p><p>void uv__run_prepare(uv_loop_t* loop);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> uv__run_#<span class="meta">#name(uv_loop_t* loop) &#123;</span></span><br><span class="line">  uv_#<span class="meta">#name##_t* h;</span></span><br><span class="line">  QUEUE <span class="built_in">queue</span>;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  QUEUE_MOVE(&amp;loop-&gt;name##_handles, &amp;<span class="built_in">queue</span>);<span class="comment">//QUEUE_MOVE</span></span><br><span class="line">  <span class="keyword">while</span> (!QUEUE_EMPTY(&amp;<span class="built_in">queue</span>)) &#123;<span class="comment">//util empty</span></span><br><span class="line">    q = QUEUE_HEAD(&amp;<span class="built_in">queue</span>);<span class="comment">//pop</span></span><br><span class="line">    h = QUEUE_DATA(q, uv_#<span class="meta">#name##_t, queue);<span class="comment">//element-&gt;handle</span></span></span><br><span class="line">    QUEUE_REMOVE(q);<span class="comment">//remove</span></span><br><span class="line">    QUEUE_INSERT_TAIL(&amp;loop-&gt;name##_handles, q);<span class="comment">//insert tail</span></span><br><span class="line">    h-&gt;name##_cb(h);<span class="comment">//callback</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h2 id="poll-phase"><a href="#poll-phase" class="headerlink" title="!!!poll phase!!!"></a>!!!poll phase!!!</h2><p>最为重要的阶段，执行I/O callback，在适当的条件下会阻塞在这个阶段</p><blockquote><p>可见poll阶段的任务就是阻塞等待监听的事件来临，然后执行对应的callback，其中阻塞是带有超时时间的，以下几种情况都会使得超时时间为0</p><ul><li>uv_run处于UV_RUN_NOWAIT模式下</li><li><code>uv_stop()</code>被调用</li><li>没有活跃的handles和request</li><li>有活跃的idle handles</li><li>有等待关闭的handles</li></ul><p>如果上述都不符合，则超时时间为距离现在最近的timer；如果没有timer则poll阶段会一直阻塞下去</p></blockquote><p>个人理解nodejs的服务，大部分时间会被阻塞在这个阶段，而不去执行closing</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不行了，看不懂了</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__io_poll</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">events</span>[1024];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pqry</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span>* <span class="title">pe</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">poll_ctl</span> <span class="title">pc</span>;</span></span><br><span class="line">  QUEUE* q;</span><br><span class="line">  <span class="keyword">uv__io_t</span>* w;</span><br><span class="line">  <span class="keyword">uint64_t</span> base;</span><br><span class="line">  <span class="keyword">uint64_t</span> diff;</span><br><span class="line">  <span class="keyword">int</span> have_signals;</span><br><span class="line">  <span class="keyword">int</span> nevents;</span><br><span class="line">  <span class="keyword">int</span> count;</span><br><span class="line">  <span class="keyword">int</span> nfds;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> rc;</span><br><span class="line">  <span class="keyword">int</span> add_failed;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;nfds == <span class="number">0</span>) &#123;</span><br><span class="line">    assert(QUEUE_EMPTY(&amp;loop-&gt;watcher_queue));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!QUEUE_EMPTY(&amp;loop-&gt;watcher_queue)) &#123;<span class="comment">//until watcher queue empty</span></span><br><span class="line">    q = QUEUE_HEAD(&amp;loop-&gt;watcher_queue);</span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INIT(q);</span><br><span class="line"></span><br><span class="line">    w = QUEUE_DATA(q, <span class="keyword">uv__io_t</span>, watcher_queue);</span><br><span class="line">    assert(w-&gt;pevents != <span class="number">0</span>);</span><br><span class="line">    assert(w-&gt;fd &gt;= <span class="number">0</span>);</span><br><span class="line">    assert(w-&gt;fd &lt; (<span class="keyword">int</span>) loop-&gt;nwatchers);</span><br><span class="line"></span><br><span class="line">    pc.events = w-&gt;pevents;</span><br><span class="line">    pc.fd = w-&gt;fd;</span><br><span class="line"></span><br><span class="line">    add_failed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;events == <span class="number">0</span>) &#123;</span><br><span class="line">      pc.cmd = PS_ADD;</span><br><span class="line">      <span class="keyword">if</span> (pollset_ctl(loop-&gt;backend_fd, &amp;pc, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != EINVAL) &#123;</span><br><span class="line">          assert(<span class="number">0</span> &amp;&amp; <span class="string">&quot;Failed to add file descriptor (pc.fd) to pollset&quot;</span>);</span><br><span class="line">          <span class="built_in">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* Check if the fd is already in the pollset */</span></span><br><span class="line">        pqry.fd = pc.fd;</span><br><span class="line">        rc = pollset_query(loop-&gt;backend_fd, &amp;pqry);</span><br><span class="line">        <span class="keyword">switch</span> (rc) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">          assert(<span class="number">0</span> &amp;&amp; <span class="string">&quot;Failed to query pollset for file descriptor&quot;</span>);</span><br><span class="line">          <span class="built_in">abort</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          assert(<span class="number">0</span> &amp;&amp; <span class="string">&quot;Pollset does not contain file descriptor&quot;</span>);</span><br><span class="line">          <span class="built_in">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* If we got here then the pollset already contained the file descriptor even though</span></span><br><span class="line"><span class="comment">         * we didn&#x27;t think it should. This probably shouldn&#x27;t happen, but we can continue. */</span></span><br><span class="line">        add_failed = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;events != <span class="number">0</span> || add_failed) &#123;</span><br><span class="line">      <span class="comment">/* Modify, potentially removing events -- need to delete then add.</span></span><br><span class="line"><span class="comment">       * Could maybe mod if we knew for sure no events are removed, but</span></span><br><span class="line"><span class="comment">       * content of w-&gt;events is handled above as not reliable (falls back)</span></span><br><span class="line"><span class="comment">       * so may require a pollset_query() which would have to be pretty cheap</span></span><br><span class="line"><span class="comment">       * compared to a PS_DELETE to be worth optimizing. Alternatively, could</span></span><br><span class="line"><span class="comment">       * lazily remove events, squelching them in the mean time. */</span></span><br><span class="line">      pc.cmd = PS_DELETE;</span><br><span class="line">      <span class="keyword">if</span> (pollset_ctl(loop-&gt;backend_fd, &amp;pc, <span class="number">1</span>)) &#123;</span><br><span class="line">        assert(<span class="number">0</span> &amp;&amp; <span class="string">&quot;Failed to delete file descriptor (pc.fd) from pollset&quot;</span>);</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      pc.cmd = PS_ADD;</span><br><span class="line">      <span class="keyword">if</span> (pollset_ctl(loop-&gt;backend_fd, &amp;pc, <span class="number">1</span>)) &#123;</span><br><span class="line">        assert(<span class="number">0</span> &amp;&amp; <span class="string">&quot;Failed to add file descriptor (pc.fd) to pollset&quot;</span>);</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    w-&gt;events = w-&gt;pevents;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  assert(timeout &gt;= <span class="number">-1</span>);</span><br><span class="line">  base = loop-&gt;time;</span><br><span class="line">  count = <span class="number">48</span>; <span class="comment">/* Benchmarks suggest this gives the best throughput. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    nfds = pollset_poll(loop-&gt;backend_fd,</span><br><span class="line">                        events,</span><br><span class="line">                        ARRAY_SIZE(events),</span><br><span class="line">                        timeout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Update loop-&gt;time unconditionally. It&#x27;s tempting to skip the update when</span></span><br><span class="line"><span class="comment">     * timeout == 0 (i.e. non-blocking poll) but there is no guarantee that the</span></span><br><span class="line"><span class="comment">     * operating system didn&#x27;t reschedule our process while in the syscall.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SAVE_ERRNO(uv__update_time(loop));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nfds == <span class="number">0</span>) &#123;</span><br><span class="line">      assert(timeout != <span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nfds == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (errno != EINTR) &#123;</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (timeout == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (timeout == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Interrupted by a signal. Update timeout and poll again. */</span></span><br><span class="line">      <span class="keyword">goto</span> update_timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    have_signals = <span class="number">0</span>;</span><br><span class="line">    nevents = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    assert(loop-&gt;watchers != <span class="literal">NULL</span>);</span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers] = (<span class="keyword">void</span>*) events;</span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers + <span class="number">1</span>] = (<span class="keyword">void</span>*) (<span class="keyword">uintptr_t</span>) nfds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nfds; i++) &#123;</span><br><span class="line">      pe = events + i;</span><br><span class="line">      pc.cmd = PS_DELETE;</span><br><span class="line">      pc.fd = pe-&gt;fd;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Skip invalidated events, see uv__platform_invalidate_fd */</span></span><br><span class="line">      <span class="keyword">if</span> (pc.fd == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      assert(pc.fd &gt;= <span class="number">0</span>);</span><br><span class="line">      assert((<span class="keyword">unsigned</span>) pc.fd &lt; loop-&gt;nwatchers);</span><br><span class="line"></span><br><span class="line">      w = loop-&gt;watchers[pc.fd];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (w == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* File descriptor that we&#x27;ve stopped watching, disarm it.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Ignore all errors because we may be racing with another thread</span></span><br><span class="line"><span class="comment">         * when the file descriptor is closed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        pollset_ctl(loop-&gt;backend_fd, &amp;pc, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Run signal watchers last.  This also affects child process watchers</span></span><br><span class="line"><span class="comment">       * because those are implemented in terms of signal watchers.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span> (w == &amp;loop-&gt;signal_io_watcher)</span><br><span class="line">        have_signals = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        w-&gt;cb(loop, w, pe-&gt;revents);</span><br><span class="line"></span><br><span class="line">      nevents++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_signals != <span class="number">0</span>)</span><br><span class="line">      loop-&gt;signal_io_watcher.cb(loop, &amp;loop-&gt;signal_io_watcher, POLLIN);</span><br><span class="line"></span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers] = <span class="literal">NULL</span>;</span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers + <span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_signals != <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span>;  <span class="comment">/* Event loop should cycle now so don&#x27;t poll again. */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nevents != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nfds == ARRAY_SIZE(events) &amp;&amp; --count != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* Poll for more events but don&#x27;t block this time. */</span></span><br><span class="line">        timeout = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout == <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">update_timeout:</span><br><span class="line">    assert(timeout &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    diff = loop-&gt;time - base;</span><br><span class="line">    <span class="keyword">if</span> (diff &gt;= (<span class="keyword">uint64_t</span>) timeout)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    timeout -= diff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="check-phase"><a href="#check-phase" class="headerlink" title="check phase"></a>check phase</h2><p>见idle prepare</p><h2 id="close"><a href="#close" class="headerlink" title="close"></a>close</h2><p>关闭handle</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__run_closing_handles</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uv_handle_t</span>* p;</span><br><span class="line">  <span class="keyword">uv_handle_t</span>* q;</span><br><span class="line"></span><br><span class="line">  p = loop-&gt;closing_handles;</span><br><span class="line">  loop-&gt;closing_handles = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    q = p-&gt;next_closing;</span><br><span class="line">    uv__finish_close(p);</span><br><span class="line">    p = q;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="where-is-process-nextTick"><a href="#where-is-process-nextTick" class="headerlink" title="where is process.nextTick"></a>where is process.nextTick</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lib/internal/process/task_queues.js</span></span><br><span class="line"><span class="comment">// `nextTick()` will not enqueue any callback when the process is about to</span></span><br><span class="line"><span class="comment">// exit since the callback would not have a chance to be executed.</span></span><br><span class="line"><span class="comment">// 意思就是nextTick在进程快要结束时不会排队callback,因为没有机会执行</span></span><br><span class="line"><span class="comment">// 你们看引用的文档吧，我看不下去了😭</span></span><br><span class="line"><span class="comment">// 主要的思路是JS执行process.nexTick()，然后将callback交给c++执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextTick</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ERR_INVALID_CALLBACK(callback);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process._exiting)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> args;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: args = [<span class="built_in">arguments</span>[<span class="number">1</span>]]; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: args = [<span class="built_in">arguments</span>[<span class="number">1</span>], <span class="built_in">arguments</span>[<span class="number">2</span>]]; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: args = [<span class="built_in">arguments</span>[<span class="number">1</span>], <span class="built_in">arguments</span>[<span class="number">2</span>], <span class="built_in">arguments</span>[<span class="number">3</span>]]; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      args = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">arguments</span>.length - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">        args[i - <span class="number">1</span>] = <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (queue.isEmpty())</span><br><span class="line">    setHasTickScheduled(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> asyncId = newAsyncId();</span><br><span class="line">  <span class="keyword">const</span> triggerAsyncId = getDefaultTriggerAsyncId();</span><br><span class="line">  <span class="keyword">const</span> tickObject = &#123;</span><br><span class="line">    [async_id_symbol]: asyncId,</span><br><span class="line">    [trigger_async_id_symbol]: triggerAsyncId,</span><br><span class="line">    callback,</span><br><span class="line">    args</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (initHooksExist())</span><br><span class="line">    emitInit(asyncId, <span class="string">&#x27;TickObject&#x27;</span>, triggerAsyncId, tickObject);</span><br><span class="line">  queue.push(tickObject);<span class="comment">//封装callback push</span></span><br><span class="line">  <span class="comment">//进入c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><h3 id="1-setTimeout-vs-setImmediate"><a href="#1-setTimeout-vs-setImmediate" class="headerlink" title="1.setTimeout vs setImmediate"></a>1.setTimeout vs setImmediate</h3><ul><li>phase执行顺序</li><li>expire设置0是不是立刻执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>setTimeout/setInterval 的第二个参数取值范围是：[1, 2^31 - 1]，如果<strong>超过这个范围</strong>则会<strong>初始化为 1</strong>，即 setTimeout(fn, 0) === setTimeout(fn, 1)。</li><li>setTimeout 的回调函数在 timer 阶段执行，setImmediate 的回调函数在 check 阶段执行，event loop 的开始会先检查 timer 阶段，但是在开始之前到 timer 阶段会消耗一定时间，所以就会出现两种情况：<ul><li>timer 前的准备时间超过 1ms，满足 loop-&gt;time &gt;= 1，则执行 timer 阶段（setTimeout）的回调函数</li><li>timer 前的准备时间小于 1ms，则先执行 check 阶段（setImmediate）的回调函数，下一次 event loop 执行 timer 阶段（setTimeout）的回调函数</li></ul></li></ul><p>在举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">Date</span>.now() - start &lt; <span class="number">10</span>);<span class="comment">//准备时间超过1ms，则直接执行timer</span></span><br></pre></td></tr></table></figure><h3 id="2-setTimeout-vs-setImmediate-2"><a href="#2-setTimeout-vs-setImmediate-2" class="headerlink" title="2.setTimeout vs setImmediate 2"></a>2.setTimeout vs setImmediate 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//setImmediate</span></span><br><span class="line"><span class="comment">//setTimeout</span></span><br></pre></td></tr></table></figure><p>在引用一下官方对于check phase的介绍</p><blockquote><p>This phase allows a person to execute callbacks immediately after the <strong>poll</strong> phase has completed. If the <strong>poll</strong> phase becomes idle and scripts have been queued with <code>setImmediate()</code>, the event loop may continue to the <strong>check</strong> phase rather than waiting.</p><p><code>setImmediate()</code> is actually a special timer that runs in a separate phase of the event loop. It uses a libuv API that schedules callbacks to execute after the <strong>poll</strong> phase has completed.</p><p>Generally, as the code is executed, the event loop will eventually hit the <strong>poll</strong> phase where it will wait for an incoming connection, request, etc. However, if a callback has been scheduled with <code>setImmediate()</code> and the <strong>poll</strong> phase becomes idle, it will end and continue to the <strong>check</strong> phase rather than waiting for <strong>poll</strong> events.</p></blockquote><p>fs.readFile 的回调函数执行完后：</p><ol><li>注册 setTimeout 的回调函数到 timer 阶段</li><li>注册 setImmediate 的回调函数到 check 阶段</li><li>event loop 从 pool 阶段出来继续往下一个阶段执行，恰好是 check 阶段，所以 setImmediate 的回调函数先执行</li><li>本次 event loop 结束后，进入<strong>下一次 event loop</strong>，执行 setTimeout 的回调函数</li></ol><p>所以，在 I/O Callbacks 中注册的 setTimeout 和 setImmediate，永远都是 setImmediate 先执行。</p><h3 id="3-process-nextTick"><a href="#3-process-nextTick" class="headerlink" title="3.process.nextTick()"></a>3.process.nextTick()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setInterval&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">tick</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  process.nextTick(tick)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//note</span></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">immediate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>);<span class="comment">//会直接打印出很多次111</span></span><br><span class="line">  setImmediate(immediate)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：setInterval <strong>永远不会打印出来</strong>。</p><p>//这个在node<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick">官方文档</a>也有相关的描述</p><p>//我在这里也进行了<a href="**https://zehai.info/2020/04/10/2020-04-10-eventloop/**">笔记</a>记录</p><p>//<em>允许用户处理errors，清理不需要的资源，事件循环前 尝试重新连接</em></p><p>//<em>有时有必要在eventloop继续之前，在call stack unwound之后，让callback执行</em></p><p><strong>解释</strong>：process.nextTick 会无限循环，将 event loop 阻塞在 microtask 阶段，导致 event loop 上其他 macrotask 阶段的回调函数没有机会执行。//<code>这段解释是前端的，后端是没有microtask的实际队列的</code></p><p>解决方法通常是用 setImmediate 替代 process.nextTick，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setInterval&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">immediate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setImmediate(immediate)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：每 100ms 打印一次 setInterval。</p><p><strong>解释</strong>：process.nextTick 内执行 process.nextTick 仍然将 tick 函数注册到当前 microtask 的尾部，所以导致 microtask 永远执行不完； setImmediate 内执行 setImmediate 会将 immediate 函数注册到下一次 event loop 的 check 阶段，而不是当前正在执行的 check 阶段，所以给了 event loop 上其他 macrotask 执行的机会。</p><p>再看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate1&#x27;</span>)</span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate3&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setImmediate1</span><br><span class="line">setImmediate3</span><br><span class="line">nextTick</span><br><span class="line">setImmediate2</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：并<strong>不是说 setImmediate 可以完全替代 process.nextTick</strong>，process.nextTick 在特定场景下还是无法被替代的，比如我们就想将一些操作放到最近的 microtask 里执行。</p><h3 id="4-promise"><a href="#4-promise" class="headerlink" title="4.promise"></a>4.promise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">  &#125;)</span><br><span class="line">promise.catch(<span class="built_in">console</span>.error)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span><br><span class="line">    at &lt;anonymous&gt;</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:188:7)</span><br><span class="line">    at Function.Module.runMain (module.js:667:11)</span><br><span class="line">    at startup (bootstrap_node.js:187:16)</span><br><span class="line">    at bootstrap_node.js:607:3</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：promise.then 类似于 process.nextTick，都会将回调函数注册到 microtask 阶段。上面代码会导致死循环，类似前面提到的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">tick</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  process.nextTick(tick)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>再看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.resolve()</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nextTick</span><br><span class="line">promise</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：promise.then 虽然和 process.nextTick 一样，都将回调函数注册到 microtask，但优先级不一样。process.nextTick 的 microtask queue 总是优先于 promise 的 microtask queue 执行。</p><h3 id="5-promise执行顺序"><a href="#5-promise执行顺序" class="headerlink" title="5.promise执行顺序"></a>5.promise执行顺序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    i === <span class="number">9999</span> &amp;&amp; resolve()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：Promise 构造函数是同步执行的，所以先打印 2、3，然后打印 5，接下来 event loop 进入执行 microtask 阶段，执行 promise.then 的回调函数打印出 4，然后执行下一个 macrotask，恰好是 timer 阶段的 setTimeout 的回调函数，打印出 1。</p><h3 id="6-综合"><a href="#6-综合" class="headerlink" title="6.综合"></a>6.综合</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">1</span><br><span class="line">7</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>process.nextTick、setTimeout 和 setImmediate 的组合，请读者自己推理吧。</p><h1 id="other-source-code"><a href="#other-source-code" class="headerlink" title="other source code"></a>other source code</h1><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lib/timers/promises.js</span></span><br><span class="line"><span class="comment">//setTimeout(function()&#123;&#125;,expire)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTimeout</span>(<span class="params">after, value, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = value !== <span class="literal">undefined</span> ? [value] : value;</span><br><span class="line">  <span class="keyword">if</span> (options == <span class="literal">null</span> || <span class="keyword">typeof</span> options !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> PromiseReject(</span><br><span class="line">      <span class="keyword">new</span> ERR_INVALID_ARG_TYPE(</span><br><span class="line">        <span class="string">&#x27;options&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Object&#x27;</span>,</span><br><span class="line">        options));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; signal, ref = <span class="literal">true</span> &#125; = options;</span><br><span class="line">  <span class="keyword">if</span> (signal !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">      (signal === <span class="literal">null</span> ||</span><br><span class="line">       <span class="keyword">typeof</span> signal !== <span class="string">&#x27;object&#x27;</span> ||</span><br><span class="line">       !(<span class="string">&#x27;aborted&#x27;</span> <span class="keyword">in</span> signal))) &#123;</span><br><span class="line">    <span class="keyword">return</span> PromiseReject(</span><br><span class="line">      <span class="keyword">new</span> ERR_INVALID_ARG_TYPE(</span><br><span class="line">        <span class="string">&#x27;options.signal&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;AbortSignal&#x27;</span>,</span><br><span class="line">        signal));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> ref !== <span class="string">&#x27;boolean&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> PromiseReject(</span><br><span class="line">      <span class="keyword">new</span> ERR_INVALID_ARG_TYPE(</span><br><span class="line">        <span class="string">&#x27;options.ref&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;boolean&#x27;</span>,</span><br><span class="line">        ref));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// TODO(@jasnell): If a decision is made that this cannot be backported</span></span><br><span class="line">  <span class="comment">// to 12.x, then this can be converted to use optional chaining to</span></span><br><span class="line">  <span class="comment">// simplify the check.</span></span><br><span class="line">  <span class="keyword">if</span> (signal &amp;&amp; signal.aborted)</span><br><span class="line">    <span class="keyword">return</span> PromiseReject(lazyDOMException(<span class="string">&#x27;AbortError&#x27;</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timeout = <span class="keyword">new</span> Timeout(resolve, after, args, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (!ref) timeout.unref();</span><br><span class="line">    insert(timeout, timeout._idleTimeout);</span><br><span class="line">    <span class="keyword">if</span> (signal) &#123;</span><br><span class="line">      signal.addEventListener(<span class="string">&#x27;abort&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timeout._destroyed) &#123;</span><br><span class="line">          <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">          <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">          reject(lazyDOMException(<span class="string">&#x27;AbortError&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;eventLoop&quot;&gt;&lt;a href=&quot;#eventLoop&quot; class=&quot;headerlink&quot; title=&quot;eventLoop&quot;&gt;&lt;/a&gt;eventLoop&lt;/h1&gt;&lt;p&gt;之前也有过章节&lt;br&gt;&lt;a href=&quot;/2020/04/10/2020-04-10
      
    
    </summary>
    
      <category term="Node" scheme="http://zehai.info/categories/Node/"/>
    
    
      <category term="source" scheme="http://zehai.info/tags/source/"/>
    
  </entry>
  
  <entry>
    <title>算法图解</title>
    <link href="http://zehai.info/2020/06/08/2020-06-08-%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    <id>http://zehai.info/2020/06/08/2020-06-08-算法图解/</id>
    <published>2020-06-08T03:34:04.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-算法简介"><a href="#1-算法简介" class="headerlink" title="1. 算法简介"></a>1. 算法简介</h1><h2 id="1-1-二分"><a href="#1-1-二分" class="headerlink" title="1.1 二分"></a>1.1 二分</h2><p>Why: 复杂度O(n)—&gt;O(logn)</p><p>使用限制：有序数组</p><h2 id="1-2-大O表示"><a href="#1-2-大O表示" class="headerlink" title="1.2 大O表示"></a>1.2 大O表示</h2><p>指出算法运行时间的增速，算法需要做的就是把O(n^2)优化到O(n)等</p><h1 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h1><h2 id="2-1-数组-链表"><a href="#2-1-数组-链表" class="headerlink" title="2.1 数组 链表"></a>2.1 数组 链表</h2><p>数组：连续物理空间，可随机访问，增删数据复杂度高</p><p>链表：分散无力空间，不可随机访问（只能顺序），增删数据复杂度低</p><table><thead><tr><th></th><th>数组</th><th>链表</th></tr></thead><tbody><tr><td>读改</td><td>O(1)</td><td>O(n)</td></tr><tr><td>增删</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><p>根据互相特性，选择合适的方式，如频繁增删用链表，反之用数组</p><h2 id="2-2-选择排序"><a href="#2-2-选择排序" class="headerlink" title="2.2 选择排序"></a>2.2 选择排序</h2><p>复杂度：O(n^2)</p><p>遍历n 个元素<strong>选择</strong> 最小/大的，遍历n-1个元素<strong>选择</strong> 最小/大的</p><h1 id="3-递归"><a href="#3-递归" class="headerlink" title="3. 递归"></a>3. 递归</h1><p>类比：套娃 :call_me_hand:</p><p>性能和易读不可兼得</p><p>避免<strong>死循环</strong>！</p><p><strong>尾递归</strong>可以解决部分性能问题</p><p>递归调用栈是性能降低的原因，遵循FIFO</p><h1 id="4-快排"><a href="#4-快排" class="headerlink" title="4. 快排"></a>4. 快排</h1><p>核心：分而治之divide and conquer，快排只是其中的一个应用</p><p>思想：递归的一种应用</p><p>快排（递归）是一种<strong>函数式编程</strong></p><p>快排通过基准值（可以选第一个元素）进行分而治之</p><h1 id="5-散列表"><a href="#5-散列表" class="headerlink" title="5. 散列表"></a>5. 散列表</h1><p>实现方式：<strong>数组</strong>，非链表，检索值key类似数组的下表，可直接访问value</p><p>应用：DNS，阻止重复数据(类set集)，作缓存（服务器端）</p><table><thead><tr><th>复杂度</th><th>散列平均</th><th>散列最糟</th><th>数组</th><th>链表</th></tr></thead><tbody><tr><td>查找</td><td>1</td><td>n</td><td>1</td><td>n</td></tr><tr><td>插入删除</td><td>1</td><td>n</td><td>n</td><td>1</td></tr></tbody></table><p>装填因子（0.4）=散列元素（4）/位置总数（10）</p><p>避免冲突：1.良好的散列函数（均匀分布） 2.较低的装填因子（&lt;<strong>0.7</strong>）</p><p>将满时候：1.申请两倍于原来的 新空间 2.hash所有元素到新空间</p><p>冲突解决：</p><ul><li>开放地址（最简单就是冲突顺延下一位，直到为空）</li><li>拉链发（指在某个位子上再拉一条链表，非👖拉链）</li></ul><h1 id="6-BFS"><a href="#6-BFS" class="headerlink" title="6.BFS"></a>6.BFS</h1><p>广度优先搜索breadth first search，解决<strong>无加权</strong>最短路径问题之一</p><p>应用：国际跳棋，拼写检查，人际关系网络</p><h1 id="7-Dijkstra"><a href="#7-Dijkstra" class="headerlink" title="7. Dijkstra"></a>7. Dijkstra</h1><p><strong>正加权有向无环</strong>图的解决算法</p><ol><li>最短时间内到达的节点</li><li>更新该节点临接节点的开销</li><li>重复</li><li>计算最终路径</li></ol><p>解决环：</p><p>负加权：bellman ford algorithm</p><h1 id="8-Greedy"><a href="#8-Greedy" class="headerlink" title="8. Greedy"></a>8. Greedy</h1><p>每步最优–&gt;全局最优，得到近似正确的结果</p><h1 id="9-DP"><a href="#9-DP" class="headerlink" title="9.DP"></a>9.DP</h1><p>列出所有可能</p><h1 id="10-K最邻近算法"><a href="#10-K最邻近算法" class="headerlink" title="10. K最邻近算法"></a>10. K最邻近算法</h1><h1 id="11-next"><a href="#11-next" class="headerlink" title="11.next"></a>11.next</h1><p>树解决了二分查找中，插入删除O(n)降低到O(log n)，但是降低了随机访问能力</p><p>树包括：二叉树，平衡二叉树，B树 B+树，，红黑树</p><p>反向索引：散列表，用于创建搜索引擎—&gt;应用：傅里叶变换</p><p>并行算法，单机并行or分布式，应用：mapreduce，map-&gt;映射 ，reduce-&gt;归并</p><p>布隆过滤器：庞大的散列表（如谷歌的上亿条），通常使用redis实现，是一种概率型数据结构（<strong>偶尔出错</strong>），使用理由，存储空间少</p><p>hyperLogLog：类似布隆，是个日志</p><p>SHA算法</p><ul><li>散列的一种应用</li><li>判断两个（超大）文件是否相同（散列值相同）</li><li>SHA（用户输入密码）？== 数据库存储的SHA值，且拖库后无法还原密码</li><li>SHA是一系列算法的统称，包括SHA-0 ,SHA-1 SHA-2 SHA-3 bcrypt etc</li><li>SHA全局敏感（改动局部，整体全变），SIMhash局部敏感（局部改变，散列值局部改变），后者用于判断网页是否已经搜集，作业是否抄袭，相似度查询</li><li>diffie-hellman密钥交换<ul><li>双方无需知道加密算法，破解难度大</li><li>公钥与私钥，client获取公钥后，1.使用公钥加密 2.服务器端使用私钥解密</li></ul></li></ul><p>线性规划：simplex算法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-算法简介&quot;&gt;&lt;a href=&quot;#1-算法简介&quot; class=&quot;headerlink&quot; title=&quot;1. 算法简介&quot;&gt;&lt;/a&gt;1. 算法简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-二分&quot;&gt;&lt;a href=&quot;#1-1-二分&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Books" scheme="http://zehai.info/categories/Books/"/>
    
    
      <category term="算法图解" scheme="http://zehai.info/tags/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2020-05-25-FirstUniqueCharacterInAString</title>
    <link href="http://zehai.info/2020/05/30/2020-05-25-FirstUniqueCharacterInAString/"/>
    <id>http://zehai.info/2020/05/30/2020-05-25-FirstUniqueCharacterInAString/</id>
    <published>2020-05-30T13:15:37.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-64"><a href="#Leetcode-64" class="headerlink" title="Leetcode-64"></a>Leetcode-64</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Given a string, find the first non-repeating character in it and return it&#39;s index. If it doesn&#39;t exist, return -1.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">s &#x3D; &quot;leetcode&quot;</span><br><span class="line">return 0.</span><br><span class="line"></span><br><span class="line">s &#x3D; &quot;loveleetcode&quot;,</span><br><span class="line">return 2.</span><br><span class="line">Note: You may assume the string contain only lowercase letters.</span><br></pre></td></tr></table></figure><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">var firstUniqChar &#x3D; function(s) &#123;</span><br><span class="line">    for(var i&#x3D;0;i&lt;s.length;i++)&#123;</span><br><span class="line">        var flag &#x3D; false;</span><br><span class="line">        for(var j&#x3D;0;j&lt;s.length;j++)&#123;</span><br><span class="line">            if(i&#x3D;&#x3D;j)continue;</span><br><span class="line">            if(s[i]&#x3D;&#x3D;s[j])flag&#x3D;true;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!flag)return i;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int firstUniqChar(String s) &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; count &#x3D; new HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        int n &#x3D; s.length();</span><br><span class="line">        &#x2F;&#x2F; build hash map : character and how often it appears</span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">            char c &#x3D; s.charAt(i);</span><br><span class="line">            count.put(c, count.getOrDefault(c, 0) + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; find the index</span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">            if (count.get(s.charAt(i)) &#x3D;&#x3D; 1) </span><br><span class="line">                return i;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode-64&quot;&gt;&lt;a href=&quot;#Leetcode-64&quot; class=&quot;headerlink&quot; title=&quot;Leetcode-64&quot;&gt;&lt;/a&gt;Leetcode-64&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>monit</title>
    <link href="http://zehai.info/2020/05/13/2020-05-13-%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6/"/>
    <id>http://zehai.info/2020/05/13/2020-05-13-监控软件/</id>
    <published>2020-05-13T08:18:55.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>监控</p><h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><p>prometheus vs zabbix</p><p>先对两者的各自特点进行一下对比：</p><table><thead><tr><th>Zabbix</th><th>Prometheus</th></tr></thead><tbody><tr><td>后端用 C 开发，界面用 PHP 开发，定制化难度很高。</td><td>后端用 golang 开发，前端是 Grafana，JSON 编辑即可解决。定制化难度较低。</td></tr><tr><td>集群规模上限为 10000 个节点。</td><td>支持更大的集群规模，速度也更快。</td></tr><tr><td>更适合监控物理机环境。</td><td>更适合云环境的监控，对 OpenStack，<strong>Kubernetes</strong> 有更好的集成。</td></tr><tr><td>监控数据存储在关系型数据库内，如 MySQL，很难从现有数据中扩展维度。</td><td>监控数据存储在基于<strong>时间序列(TSDB)</strong>的数据库内，便于对已有数据进行新的聚合。</td></tr><tr><td>安装简单，zabbix-server 一个软件包中包括了所有的服务端功能。</td><td>安装相对复杂，<strong>监控、告警和界面</strong>都分属于不同的组件。</td></tr><tr><td><strong>图形化界面</strong>比较成熟，界面上基本上能完成全部的配置操作。</td><td>界面相对较弱，很多配置需要修改配置文件。</td></tr><tr><td>发展时间更长，对于很多监控场景，都有现成的解决方案。</td><td>2015 年后开始快速发展，但发展时间较短，成熟度不及 Zabbix。</td></tr></tbody></table><p>由于最后敲定了Prometheus方案，对于zabbix就云评测了，欢迎指正</p><ul><li>虽然图形化界面弱化，很多配置走yml文件，但图形化界面真的没有必要</li><li>时序数据库，高并发下好于mysql（不然干嘛开发tsdb应对监控场景）</li><li>prom支持pull和push模型，可以支持k8s，swarm等服务发现</li></ul><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>Performance？webVitals？以后用到再补充</p><p>主要关注性能，pv，redirect，err等问题</p><h1 id="页面是否可用"><a href="#页面是否可用" class="headerlink" title="页面是否可用"></a>页面是否可用</h1><p>阿里云-云监控控制台</p><p>可提供网址监控，包括cookie, headers 等自定义的简单配置，进行电话，邮件，短信，旺旺等报警</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;监控&lt;/p&gt;
&lt;h1 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h1&gt;&lt;p&gt;prometheus vs zabbix&lt;/p&gt;
&lt;p&gt;先对两者的各自特点进行一下对比：&lt;/p&gt;
&lt;table&gt;
&lt;th
      
    
    </summary>
    
      <category term="monit" scheme="http://zehai.info/categories/monit/"/>
    
    
      <category term="intro" scheme="http://zehai.info/tags/intro/"/>
    
  </entry>
  
  <entry>
    <title>Node.JSv14</title>
    <link href="http://zehai.info/2020/04/22/2020-04-22-Node14/"/>
    <id>http://zehai.info/2020/04/22/2020-04-22-Node14/</id>
    <published>2020-04-22T02:37:29.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><p>mod<br>今天看到Node Current更新了14的版本，看看都有些什么东西</p><p>前置了解了一下doc中提到的semver，是一个语义化版本semantic versioning，实现版本和版本规范的解析，计算，比较，用以解决在大型项目中对依赖的版本失去控制的问题，Node.js 的包管理工具 npm 也完全基于 Semantic Versioning 来管理依赖的版本。</p><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/20747196">semver：语义化版本规范在 Node.js 中的实现</a></p><h2 id="deprecations"><a href="#deprecations" class="headerlink" title="deprecations"></a>deprecations</h2><p>sermver弃用一部分功能</p><ul><li><strong>(SEMVER-MAJOR)</strong> <strong>crypto</strong>: move pbkdf2 without digest to EOL (James M Snell) </li><li><strong>(SEMVER-MAJOR)</strong> <strong>fs</strong>: deprecate closing FileHandle on garbage collection (James M Snell)</li><li><strong>(SEMVER-MAJOR)</strong> <strong>http</strong>: move OutboundMessage.prototype.flush to EOL (James M Snell)</li><li><strong>(SEMVER-MAJOR)</strong> <strong>lib</strong>: move GLOBAL and root aliases to EOL (James M Snell)</li><li><strong>(SEMVER-MAJOR)</strong> <strong>os</strong>: move tmpDir() to EOL (James M Snell) </li><li><strong>(SEMVER-MAJOR)</strong> <strong>src</strong>: remove deprecated wasm type check (Clemens Backes) </li><li><strong>(SEMVER-MAJOR)</strong> <strong>stream</strong>: move _writableState.buffer to EOL (James M Snell)</li><li><strong>(SEMVER-MINOR)</strong> <strong>doc</strong>: deprecate process.mainModule (Antoine du HAMEL)</li><li><strong>(SEMVER-MINOR)</strong> <strong>doc</strong>: deprecate process.umask() with no arguments (Colin Ihrig) </li></ul><h2 id="ECMAScript-Modules"><a href="#ECMAScript-Modules" class="headerlink" title="ECMAScript Modules"></a>ECMAScript Modules</h2><p>在 <code>v13</code> 中，需要调用 <code>--experimental-modules</code> 来开启 <code>ESM module</code> 支持， 而且还会有警告，但目前已经移除警告（还是需要手动开启）<br>仍在实验中，但是其已经非常完善，移除警告迈向了stable的重要一步</p><h2 id="New-V8-ArrayBuffer-API"><a href="#New-V8-ArrayBuffer-API" class="headerlink" title="New V8 ArrayBuffer API"></a>New V8 ArrayBuffer API</h2><p>v8不再支持多个ArrayBuffer指向相同的base address</p><h2 id="Toolchain-and-Compiler-Upgrades"><a href="#Toolchain-and-Compiler-Upgrades" class="headerlink" title="Toolchain and Compiler Upgrades"></a>Toolchain and Compiler Upgrades</h2><p>//没看懂</p><ul><li><strong>(SEMVER-MAJOR)</strong> <strong>build</strong>: update macos deployment target to 10.13 for 14.x (AshCripps) <a href="https://github.com/nodejs/node/pull/32454">#32454</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: update cross compiler machine for Linux armv7 (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812">#32812</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: update Centos/RHEL releases use devtoolset-8 (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812">#32812</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: remove SmartOS from official binaries (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812">#32812</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>win</strong>: block running on EOL Windows versions (João Reis) <a href="https://github.com/nodejs/node/pull/31954">#31954</a></li></ul><p>It is expected that there will be an ABI mismatch on ARM between the Node.js binary and native addons. Native addons are only broken if they interact with <code>std::shared_ptr</code>. This is expected to be fixed in a later version of Node.js 14.</p><h2 id="Update-to-V8-8-1"><a href="#Update-to-V8-8-1" class="headerlink" title="Update to V8 8.1"></a>Update to V8 8.1</h2><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li><strong>cli, report</strong>: move –report-on-fatalerror to stable (Colin Ihrig) </li><li><strong>deps</strong>: upgrade to libuv 1.37.0 (Colin Ihrig) </li><li><strong>fs</strong>: add fs/promises alias module </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h1&gt;&lt;p&gt;mod&lt;br&gt;今天看到Node Current更新了14的版本，看看都有些什么东西&lt;/p&gt;
&lt;p&gt;前置了解了一下doc中提到的sem
      
    
    </summary>
    
      <category term="Node" scheme="http://zehai.info/categories/Node/"/>
    
    
      <category term="14" scheme="http://zehai.info/tags/14/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeWeek2</title>
    <link href="http://zehai.info/2020/04/19/2020-04-19-LeetCodeWeek1/"/>
    <id>http://zehai.info/2020/04/19/2020-04-19-LeetCodeWeek1/</id>
    <published>2020-04-19T05:23:52.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Product-of-Array-Except-Self"><a href="#Problem-Product-of-Array-Except-Self" class="headerlink" title="Problem Product of Array Except Self"></a>Problem Product of Array Except Self</h1><p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1,  return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br></pre></td></tr></table></figure><p><strong>Constraint:</strong> It’s guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.</p><p><strong>Note:</strong> Please solve it <strong>without division</strong> and in O(<em>n</em>).</p><p><strong>Follow up:</strong><br>Could you solve it with constant space complexity? (The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;3ms</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] productExceptSelf(int[] nums) &#123;</span><br><span class="line">        int sum &#x3D;1;</span><br><span class="line">        int hasZero &#x3D;0;</span><br><span class="line">        for(int num :nums)&#123;</span><br><span class="line">            if(num!&#x3D;0)&#123;</span><br><span class="line">                sum*&#x3D;num;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                hasZero++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i&#x3D;0;i&lt;nums.length;i++)&#123;</span><br><span class="line">            if(hasZero&gt;&#x3D;2)&#123;</span><br><span class="line">                nums[i]&#x3D;0;</span><br><span class="line">            &#125;else if(hasZero&#x3D;&#x3D;1)&#123;</span><br><span class="line">                if(nums[i]&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    nums[i]&#x3D;sum;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    nums[i]&#x3D;0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                nums[i]&#x3D;sum&#x2F;nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1ms</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] productExceptSelf(int[] nums) &#123;</span><br><span class="line">        int n &#x3D; nums.length;</span><br><span class="line">        int[] left &#x3D; new int[n];</span><br><span class="line">        left[0] &#x3D; 1;</span><br><span class="line">        for (int i &#x3D; 1; i &lt; n; i++) &#123;</span><br><span class="line">            left[i] &#x3D; left[i-1] * nums[i-1];</span><br><span class="line">        &#125;</span><br><span class="line">        int product &#x3D; 1;</span><br><span class="line">        for (int i &#x3D; n - 1; i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">            left[i] *&#x3D; product;</span><br><span class="line">            product *&#x3D; nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-678Valid-Parenthesis-String"><a href="#Problem-678Valid-Parenthesis-String" class="headerlink" title="Problem-678Valid Parenthesis String"></a>Problem-678Valid Parenthesis String</h1><p><strong>Medium</strong></p><p>Given a string containing only three types of characters: ‘(‘, ‘)’ and ‘*’, write a function to check whether this string is valid. We define the validity of a string by these rules:</p><ol><li>Any left parenthesis <code>&#39;(&#39;</code> must have a corresponding right parenthesis <code>&#39;)&#39;</code>.</li><li>Any right parenthesis <code>&#39;)&#39;</code> must have a corresponding left parenthesis <code>&#39;(&#39;</code>.</li><li>Left parenthesis <code>&#39;(&#39;</code> must go before the corresponding right parenthesis <code>&#39;)&#39;</code>.</li><li><code>&#39;*&#39;</code> could be treated as a single right parenthesis <code>&#39;)&#39;</code> or a single left parenthesis <code>&#39;(&#39;</code> or an empty string.</li><li>An empty string is also valid.</li></ol><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(*)&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(*))&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li>The string size will be in the range [1, 100].</li></ol><h2 id="key-1"><a href="#key-1" class="headerlink" title="key"></a>key</h2><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;<span class="keyword">int</span> star=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] c = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> i : c) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    left--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    star++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> || left - star == <span class="number">0</span> || left + star == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> ans = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        solve(<span class="keyword">new</span> StringBuilder(s), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(StringBuilder sb, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == sb.length()) &#123;</span><br><span class="line">            ans |= valid(sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sb.charAt(i) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c: <span class="string">&quot;() &quot;</span>.toCharArray()) &#123;</span><br><span class="line">                sb.setCharAt(i, c);</span><br><span class="line">                solve(sb, i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (ans) <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.setCharAt(i, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            solve(sb, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sb.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = sb.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) bal++;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) bal--;</span><br><span class="line">            <span class="keyword">if</span> (bal &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bal == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;*&#x27;</span>) dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n-<span class="number">1</span> &amp;&amp;</span><br><span class="line">                    (s.charAt(i) == <span class="string">&#x27;(&#x27;</span> || s.charAt(i) == <span class="string">&#x27;*&#x27;</span>) &amp;&amp;</span><br><span class="line">                    (s.charAt(i+<span class="number">1</span>) == <span class="string">&#x27;)&#x27;</span> || s.charAt(i+<span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>)) &#123;</span><br><span class="line">                dp[i][i+<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> size = <span class="number">2</span>; size &lt; n; size++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + size &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;*&#x27;</span> &amp;&amp; dp[i+<span class="number">1</span>][i+size] == <span class="keyword">true</span>) &#123;</span><br><span class="line">                    dp[i][i+size] = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;(&#x27;</span> || s.charAt(i) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = i+<span class="number">1</span>; k &lt;= i+size; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((s.charAt(k) == <span class="string">&#x27;)&#x27;</span> || s.charAt(k) == <span class="string">&#x27;*&#x27;</span>) &amp;&amp;</span><br><span class="line">                                (k == i+<span class="number">1</span> || dp[i+<span class="number">1</span>][k-<span class="number">1</span>]) &amp;&amp;</span><br><span class="line">                                (k == i+size || dp[k+<span class="number">1</span>][i+size])) &#123;</span><br><span class="line">                            dp[i][i+size] = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> lo = <span class="number">0</span>, hi = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span> c: s.toCharArray()) &#123;</span><br><span class="line">           lo += c == <span class="string">&#x27;(&#x27;</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">           hi += c != <span class="string">&#x27;)&#x27;</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (hi &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">           lo = Math.max(lo, <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> lo == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-Product-of-Array-Except-Self&quot;&gt;&lt;a href=&quot;#Problem-Product-of-Array-Except-Self&quot; class=&quot;headerlink&quot; title=&quot;Problem Product of A
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>同一宿主机下docker互相访问</title>
    <link href="http://zehai.info/2020/04/16/2020-04-16-%E5%90%8C%E4%B8%80%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8Bdocker%E4%BA%92%E7%9B%B8%E8%AE%BF%E9%97%AE/"/>
    <id>http://zehai.info/2020/04/16/2020-04-16-同一宿主机下docker互相访问/</id>
    <published>2020-04-16T10:06:19.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>该文档解决：docker下，altermanager收不到prometheus消息</p><p>事因，我在一个宿主机下建立了多个docker容器</p><ul><li>node-exporter</li><li>prometheus</li><li>grafana</li><li>alertmanager</li><li>timonwong/prometheus-webhook-dingtalk</li></ul><p>这些服务之间会有一些互相访问，如prometheus可以发送数据给alertmanager来发送报警信息，alertmanager通过规则处理可以发送邮件，发送钉钉等方式告知用户，问题就出在prometheus的yml配置文档中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: [&#x27;localhost:9002&#x27;]  </span><br><span class="line">        </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##############</span></span></span><br><span class="line">修改后：</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: [&#x27;10.10.10.10:9002&#x27;]  </span><br></pre></td></tr></table></figure><p>问题出在了prometheus的配置中访问了localhost端口，但这个并不是访问宿主机的9002的端口，而是访问的是<code>docker内部的9002</code>端口</p><p>找到问题后，使用了宿主机ip+port的方式进行访问</p><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>查询了资料后，发现解决该问题的方法有：</p><ul><li>宿主ip：port访问</li><li>容器ip访问</li><li>link建立通信网络(单向，不推荐)–link xxx</li><li>user-defined networks（docker dns server/bridge）</li></ul><p>前两种不太推荐，因为如果容器ip更改或者宿主机ip更改就需要更新配置文档，第三种方法不太推荐，run 时候link只是单向的建立连接，第四种<a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建网络</span><br><span class="line">docker network create -d bridge my-bridge-network</span><br><span class="line">&#x2F;&#x2F;run时候加入网络</span><br><span class="line">docker run -it --network test-network --network-alias mysql  -e MYSQL_ROOT_PASSWORD&#x3D;123 mysql:5.7</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what&quot;&gt;&lt;/a&gt;what&lt;/h1&gt;&lt;p&gt;该文档解决：docker下，altermanager收不到prometheus消息&lt;/p&gt;
&lt;p&gt;事因，我在一个宿主机下建立
      
    
    </summary>
    
      <category term="Question" scheme="http://zehai.info/categories/Question/"/>
    
    
      <category term="整理" scheme="http://zehai.info/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>node整理</title>
    <link href="http://zehai.info/2020/04/10/2020-04-10-eventloop/"/>
    <id>http://zehai.info/2020/04/10/2020-04-10-eventloop/</id>
    <published>2020-04-10T08:44:26.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>eventloop使得单线程机制的node实现非阻塞I/O的机制，将任务通过libuv分发给线程池后，交由系统内核完成（多线程），完成后内核通知nodejs，将回调放入<code>poll</code>队列执行</p><p>启动nodejs时，eventloop初始化，进程会输入很多script，包括：</p><ul><li>async API calls</li><li>定时器</li><li>process.nextTick()</li></ul><p><img src="../img/phaseOfEventloop-1586590365657.png" alt=""></p><p>eventloop有六个队列</p><ul><li>timers</li><li>pending callbacks</li><li>idle,prepare</li><li>poll(connections,data,etc)</li><li>check</li><li>close callbacks</li></ul><p>这些队列被称作phase,每个phase都是一个可以放callback的FIFO队列，当进入一个phase时，队列将执行完phase中的callback或者执行最大数目的callback后将进入另一个phase</p><ul><li>timers：执行定时器，包括setTimeout，setInerval</li><li>pending callbacks 执行延迟到下一个循环的I/O callback</li><li>idle，prepare 处理系统内部</li><li>poll：检查新的I/O事件，执行I/O回调,node会适当的在此阻塞</li><li>check:setImmediate()</li><li>close：关闭回调函数，如：socket.on(‘close’,foo())</li></ul><h1 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h1><h2 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h2><p>设定延迟后，timers会在规定的时间执行，但存在情况延迟，如<code>poll</code> phase执行回调，超过了timer设定的时间。因为poll必须完成一个任务后才可以检查最近的定时器，没到时间就执行下一个callback，执行callback期间无法中断</p><blockquote><p>可以得出结论：<code>poll</code>控制着定时器何时执行</p></blockquote><p>另外为了防止poll phase 变成恶汉，libuv 制定了一个依赖于系统的硬性最大值，来停止轮询获取更多事件</p><h2 id="pending-callbacks"><a href="#pending-callbacks" class="headerlink" title="pending callbacks"></a>pending callbacks</h2><p>该队列在系统错误时执行回调（如TCP err），如TCP socket尝试重连收到了<code>ECONNREFUSED</code>，系统需要这些错误报告，那这个错误报告回调就会放在pending callbacks中等待被执行</p><h2 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h2><p>最重要的阶段，poll主要包含两个功能：</p><ol><li><p>计算阻塞和轮询的IO时间</p></li><li><p>执行poll 队列里的events</p></li></ol><p>当eventloop进入<code>poll</code>阶段，并没有timers的时候</p><ul><li><code>poll</code>不为空，顺序同步执行任务，直到为空或达到处理数量上限</li><li><code>poll</code>为空：如果有setImmediate()，则进入<code>check phase</code>，反之就在<code>poll</code>等客人</li></ul><p>一但<code>poll</code>为空，eventlopp将会检查计时器是否有快到的，如果有需要执行的，eventloop将要进入<code>timers</code>阶段来顺序执行timer callback</p><h2 id="check"><a href="#check" class="headerlink" title="check"></a>check</h2><p>这个phase可以在<code>poll</code>执行完成时开始执行setImmediate()回调。他其实是特殊的定时器队列，<strong>使用libuv API在poll完成的阶段执行</strong>（这也是他存在的原因）。</p><h2 id="close-callbacks"><a href="#close-callbacks" class="headerlink" title="close callbacks"></a>close callbacks</h2><p>socket.desroy()等执行关闭event时候会进入该phase，否则会被process.nextTick()触发</p><h1 id="setImmedate-vs-setTimeout"><a href="#setImmedate-vs-setTimeout" class="headerlink" title="setImmedate() vs setTimeout()"></a>setImmedate() vs setTimeout()</h1><p>相似却又不同</p><ul><li>setImmediate()是poll执行完成后执行的script</li><li>setTimeout()是定时执行的</li></ul><p>执行哪个收到上下文的约束，如果两个都被主模块调用，那么进程性能将会收到约束（影响其他app运行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">without IO</span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;timeout&#39;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">setImmediate(() &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;immediate&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">timeout</span><br><span class="line">immediate</span><br><span class="line"></span><br><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br><span class="line"></span><br><span class="line">with IO</span><br><span class="line">&#x2F;&#x2F; timeout_vs_immediate.js</span><br><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () &#x3D;&gt; &#123;</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;timeout&#39;);</span><br><span class="line">  &#125;, 0);</span><br><span class="line">  setImmediate(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;immediate&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure><p>setImmediate()好处在于，如果有IO时会比setTimeout先执行</p><h2 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a>process.nextTick()</h2><p>它是个异步API，并没有出现在六个phase中，他并不属于eventloop的一部分，当操作完成后处理nextTickQueue而不管eventloop执行到哪个阶段，这个异步API依赖于C/C++处理 JavaScript</p><p>他的callbakcs会立即执行，<strong>直到执行完</strong>，eventloop才会正常工作（如果nextTick递归调用则会死循环）</p><p>为什么会出现这种设计？</p><p>出于所有<strong>接口都应该异步</strong>的设计思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function apiCall(arg, callback) &#123;</span><br><span class="line">  if (typeof arg !&#x3D;&#x3D; &#39;string&#39;)</span><br><span class="line">    return process.nextTick(callback,</span><br><span class="line">                            new TypeError(&#39;argument should be string&#39;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码段会校验参数，如果不正确，它将会把错误传递给回调。该API最近更新，允许传任何参给process.nextTick(),所以你不需要嵌套。仅在剩余代码执行之后我们会把错误反馈给用户，通过nextTick，我们保证<code>apiCal()</code>始终在用户胜于代码之后及eventloop继续之前，执行。为了达到这个目标，JS栈内存允许展开并且立即执行提供的callback，似的nextTick递归不会有报错。</p><h3 id="process-nextTick-vs-setImmediate"><a href="#process-nextTick-vs-setImmediate" class="headerlink" title="process.nextTick() vs setImmediate()"></a>process.nextTick() vs setImmediate()</h3><ul><li>process.nextTick()立刻执行</li><li>setImmediate()下次tick执行</li></ul><p>为什么需要process.nextTick()</p><ul><li>允许用户处理errors，清理不需要的资源，事件循环前 尝试重新连接</li><li>有时有必要在eventloop继续之前，在call stack unwound之后，让callback执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const server &#x3D; net.createServer();</span><br><span class="line">server.on(&#39;connection&#39;, (conn) &#x3D;&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8080);</span><br><span class="line">server.on(&#39;listening&#39;, () &#x3D;&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure><p>listen()的callback调用的是setImmiate()，除非传递Hostname，否则立即绑定端口。为了保证eventloop继续，他必须进入<code>poll</code> phase，这意味着，存在可能已经收到了连接，从而允许在侦听事件之前触发连接事件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h1&gt;&lt;p&gt;eventloop使得单线程机制的node实现非阻塞I/O的机制，将任务通过libuv分发给线程池后，交由系统内核完成（多线
      
    
    </summary>
    
      <category term="Node" scheme="http://zehai.info/categories/Node/"/>
    
    
      <category term="整理" scheme="http://zehai.info/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeWeek2</title>
    <link href="http://zehai.info/2020/04/08/2020-04-08-LeetCodeWeek2/"/>
    <id>http://zehai.info/2020/04/08/2020-04-08-LeetCodeWeek2/</id>
    <published>2020-04-08T08:44:26.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prolem876-Submission-Detail"><a href="#Prolem876-Submission-Detail" class="headerlink" title="Prolem876-Submission Detail"></a>Prolem876-Submission Detail</h1><p>Given a non-empty, singly linked list with head node <code>head</code>, return a middle node of linked list.</p><p>If there are two middle nodes, return the second middle node.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: Node 3 from this list (Serialization: [3,4,5])</span><br><span class="line">The returned node has value 3.  (The judge&#39;s serialization of this node is [3,4,5]).</span><br><span class="line">Note that we returned a ListNode object ans, such that:</span><br><span class="line">ans.val &#x3D; 3, ans.next.val &#x3D; 4, ans.next.next.val &#x3D; 5, and ans.next.next.next &#x3D; NULL.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5,6]</span><br><span class="line">Output: Node 4 from this list (Serialization: [4,5,6])</span><br><span class="line">Since the list has two middle nodes with values 3 and 4, we return the second one.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>The number of nodes in the given list will be between <code>1</code> and <code>100</code>.</li></ul><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>题目输出单向链表的中间元素，有这么几个思路</p><ul><li>O(N)–&gt;遍历放数组，1/2输出<code>return A[t / 2]</code></li><li>O(N)–&gt;根据中间特点，mid前进一格，end前进两格</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>第一次提交:0ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode mid = head;</span><br><span class="line">        ListNode end = head;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(end.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            mid = head.next;</span><br><span class="line">            ListNode tmp = mid;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span>)&#123;<span class="comment">//搞复杂了</span></span><br><span class="line">                <span class="keyword">if</span>(tmp.next==<span class="keyword">null</span>)<span class="keyword">return</span> mid;</span><br><span class="line">                end = tmp.next;</span><br><span class="line">                tmp=tmp.next;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次参考其他代码-提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode middleNode(ListNode head) &#123;</span><br><span class="line">        ListNode mid &#x3D; head, end &#x3D; head;</span><br><span class="line">        while (mid !&#x3D; null &amp;&amp; end.next !&#x3D; null) &#123;</span><br><span class="line">            mid &#x3D; mid.next;</span><br><span class="line">            end &#x3D; end.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prolem876-Submission-Detail&quot;&gt;&lt;a href=&quot;#Prolem876-Submission-Detail&quot; class=&quot;headerlink&quot; title=&quot;Prolem876-Submission Detail&quot;&gt;&lt;/a&gt;Prole
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeWeek1</title>
    <link href="http://zehai.info/2020/04/05/2020-04-05-LeetCodeWeek1/"/>
    <id>http://zehai.info/2020/04/05/2020-04-05-LeetCodeWeek1/</id>
    <published>2020-04-05T14:32:05.000Z</published>
    <updated>2021-02-24T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Single-Number"><a href="#Problem-Single-Number" class="headerlink" title="Problem  Single Number"></a>Problem  Single Number</h1><p>好久没有刷题了，刚好遇到LeetCode，30天计划，打算强迫自己完成</p><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong></p><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><h1 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h1><p>思路</p><ul><li>第一个思路O(n^2)去做类似于冒泡遍历的办法</li><li>借助Array.sort()可以迅速排序，然后O(n)的办法遍历得到结果</li><li>（以上是自己的思路，以下为LeetCode代码思考）</li><li><a href="## 异或">通过异或操作迅速比较</a></li><li>通过 Arrays.stream(nums).reduce(0, (x, y) -&gt; x ^ y)来更快迭代每个元素</li></ul><h2 id="Array-steam"><a href="#Array-steam" class="headerlink" title="Array.steam()"></a>Array.steam()</h2><p>以下参考<a href="https://blog.csdn.net/a13662080711/article/details/84928181">CSDN</a></p><p>Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。</p><p>Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。</p><p>而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程</p><p>简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）。</p><p>（以下为个人理解）</p><p>相对于Java中的Stream流，Java中也有，比如Array.reduce(),Array.foreach()等，通过回调函数的方式进行，</p><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>|=：两个二进制对应位都为0时，结果等于0，否则结果等于1；</p><p>&amp;=：两个二进制的对应位都为1时，结果为1，否则结果等于0；</p><p>^=：两个二进制的对应位相同，结果为0，否则结果为1。</p><p>对于这道题来说，[2,2,1]</p><p>第零次遍历：init res=0,题目要求找出出现一次的数，所以这个数肯定存在</p><p>第一次遍历：res=2</p><p>第二次遍历：res=0，因为res^=2（即res=res^2）</p><p>第三次遍历：res=1结束遍历</p><p><strong>综上：常用^= 以及&gt;&gt;位运算符，C级别的性能</strong></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul><li>对于异或方法（0ms）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            result ^= n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己的方法就不贴了。。==感觉好蠢==写了半天。</p><h1 id="Problem-Move-Zeroes"><a href="#Problem-Move-Zeroes" class="headerlink" title="Problem  Move Zeroes"></a>Problem  Move Zeroes</h1><p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>Note</strong>:</p><ol><li>You must do this <strong>in-place</strong> without making a copy of the array.</li><li>Minimize the total number of operations.</li></ol><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h1><p>第一版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;nums.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    nums[j]=nums[j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                nums[nums.length-<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本根据题目的意思，想法就是找到一个0，整体往前移动一位，一把梭，但写完发现，<strong>本身没有必要整体前移</strong>，因为我的判断是num[i]是不是为0，所以只需要将0的个数记录下来，非0的元素前移，最后补0就可以了</p><p>第二版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public void moveZeroes(int[] nums) &#123;</span><br><span class="line">         if (nums &#x3D;&#x3D; null || nums.length &#x3D;&#x3D; 0) return;        </span><br><span class="line"> </span><br><span class="line">        int insertPos &#x3D; 0;</span><br><span class="line">        for (int num: nums) &#123;</span><br><span class="line">            if (num !&#x3D; 0) nums[insertPos++] &#x3D; num;</span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">        while (insertPos &lt; nums.length) &#123;</span><br><span class="line">            nums[insertPos++] &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Problem-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Problem Best Time to Buy and Sell Stock II"></a>Problem Best Time to Buy and Sell Stock II</h1><p>Say you have an array for which the ith element is the price of a given stock on day i.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p><p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p><p>Example 1:</p><p>Input: [7,1,5,3,6,4]<br>Output: 7<br>Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.<br>             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.<br>Example 2:</p><p>Input: [1,2,3,4,5]<br>Output: 4<br>Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.<br>             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are<br>             engaging multiple transactions at the same time. You must sell before buying again.<br>Example 3:</p><p>Input: [7,6,4,3,1]<br>Output: 0<br>Explanation: In this case, no transaction is done, i.e. max profit = 0.</p><h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>题目获取最大利润，本以为是通过动态规划DP来做，但是仔细一想，差值就能解决问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxProfit(int[] prices) &#123;</span><br><span class="line">        int res &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; prices.length - 1; ++i) &#123;</span><br><span class="line">            if (prices[i] &lt; prices[i + 1]) &#123;</span><br><span class="line">                res +&#x3D; prices[i + 1] - prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Problem-happy-Number"><a href="#Problem-happy-Number" class="headerlink" title="Problem happy Number"></a>Problem happy Number</h1><p>Write an algorithm to determine if a number is “happy”.</p><p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p><p><strong>Example:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">12 + 92 &#x3D; 82</span><br><span class="line">82 + 22 &#x3D; 68</span><br><span class="line">62 + 82 &#x3D; 100</span><br><span class="line">12 + 02 + 02 &#x3D; 1</span><br></pre></td></tr></table></figure><h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h1><p>第一版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isHappy(int n) &#123;</span><br><span class="line">         int sum &#x3D;0;</span><br><span class="line">        while (sum !&#x3D; 1) &#123;</span><br><span class="line">            if(sum!&#x3D;0)&#123;</span><br><span class="line">                n&#x3D;sum;sum&#x3D;0;</span><br><span class="line">            &#125;</span><br><span class="line">            while (n &gt; 0) &#123;</span><br><span class="line">                int t &#x3D; n % 10;</span><br><span class="line">                sum +&#x3D; t * t;</span><br><span class="line">                n &#x2F;&#x3D; 10;</span><br><span class="line">            &#125;</span><br><span class="line">            if(sum&#x3D;&#x3D;0)return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实写完这个框架我就想起来了，可能在计算上存在死循环，就比如</p><p><img src="../img/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjAyL2ltYWdlMi5wbmc.jfif" alt="在这里插入图片描述"></p><p>如果这样的题目就进入了死循环，所以干脆直接通过hashset的方式进行过滤</p><p>添加了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(set.contains(sum))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    set.add(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体代码如下：</p><p>Runtime: 5 ms, faster than 9.41% of Java online submissions for Happy Number.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum!=<span class="number">0</span>)&#123;</span><br><span class="line">            n=sum;sum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = n % <span class="number">10</span>;</span><br><span class="line">            sum += t * t;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(sum))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            set.add(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-Single-Number&quot;&gt;&lt;a href=&quot;#Problem-Single-Number&quot; class=&quot;headerlink&quot; title=&quot;Problem  Single Number&quot;&gt;&lt;/a&gt;Problem  Single Number
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
</feed>
